import{_ as n,r as s,c as a,a as o,w as e,f as t,e as l,b as c,o as p}from"./app.74c3daae.js";const r='{"title":"模拟实现 Symbol 类型","description":"","frontmatter":{},"headers":[{"level":2,"title":"熟悉Symbol几种特性","slug":"熟悉symbol几种特性"},{"level":3,"title":"1. Symbol 值通过 Symbol 函数生成，使用 typeof，结果为 \\"symbol\\"","slug":"_1-symbol-值通过-symbol-函数生成，使用-typeof，结果为-symbol"},{"level":3,"title":"2. Symbol 函数前不能使用 new 命令，否则会报错。这是因为生成的 Symbol 是一个原始类型的值，不是对象。","slug":"_2-symbol-函数前不能使用-new-命令，否则会报错。这是因为生成的-symbol-是一个原始类型的值，不是对象。"},{"level":3,"title":"3. instanceof 的结果为 false","slug":"_3-instanceof-的结果为-false"},{"level":3,"title":"4. Symbol 函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。","slug":"_4-symbol-函数可以接受一个字符串作为参数，表示对-symbol-实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。"},{"level":3,"title":"5. 如果 Symbol 的参数是一个对象，就会调用该对象的 toString 方法，将其转为字符串，然后才生成一个 Symbol 值。","slug":"_5-如果-symbol-的参数是一个对象，就会调用该对象的-tostring-方法，将其转为字符串，然后才生成一个-symbol-值。"},{"level":3,"title":"6. Symbol 函数的参数只是表示对当前 Symbol 值的描述，相同参数的 Symbol 函数的返回值是不相等的。","slug":"_6-symbol-函数的参数只是表示对当前-symbol-值的描述，相同参数的-symbol-函数的返回值是不相等的。"},{"level":3,"title":"7. Symbol 值不能与其他类型的值进行运算，会报错。","slug":"_7-symbol-值不能与其他类型的值进行运算，会报错。"},{"level":3,"title":"8. Symbol 值可以显式转为字符串。","slug":"_8-symbol-值可以显式转为字符串。"},{"level":3,"title":"9. Symbol 值可以作为标识符，用于对象的属性名，可以保证不会出现同名的属性。","slug":"_9-symbol-值可以作为标识符，用于对象的属性名，可以保证不会出现同名的属性。"},{"level":3,"title":"10. Symbol 作为属性名，该属性不会出现在 for...in、for...of 循环中，也不会被 Object.keys()、Object.getOwnPropertyNames()、JSON.stringify() 返回。但是，它也不是私有属性，有一个 Object.getOwnPropertySymbols 方法，可以获取指定对象的所有 Symbol 属性名。","slug":"_10-symbol-作为属性名，该属性不会出现在-for-in、for-of-循环中，也不会被-object-keys-、object-getownpropertynames-、json-stringify-返回。但是，它也不是私有属性，有一个-object-getownpropertysymbols-方法，可以获取指定对象的所有-symbol-属性名。"},{"level":3,"title":"11. 如果我们希望使用同一个 Symbol 值，可以使用 Symbol.for。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建并返回一个以该字符串为名称的 Symbol 值。","slug":"_11-如果我们希望使用同一个-symbol-值，可以使用-symbol-for。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的-symbol-值。如果有，就返回这个-symbol-值，否则就新建并返回一个以该字符串为名称的-symbol-值。"},{"level":3,"title":"12. Symbol.keyFor 方法返回一个已登记的 Symbol 类型值的 key。","slug":"_12-symbol-keyfor-方法返回一个已登记的-symbol-类型值的-key。"},{"level":2,"title":"分析","slug":"分析"},{"level":3,"title":"第一版","slug":"第一版"},{"level":2,"title":"第二版","slug":"第二版"},{"level":3,"title":"1. 使用 typeof，结果为 \\"symbol\\"。","slug":"_1-使用-typeof，结果为-symbol-。"},{"level":3,"title":"3. instanceof 的结果为 false","slug":"_3-instanceof-的结果为-false-1"},{"level":3,"title":"4. Symbol 函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述。主要是为了在控制台显示，或者转为字符串时，比较容易区分。","slug":"_4-symbol-函数可以接受一个字符串作为参数，表示对-symbol-实例的描述。主要是为了在控制台显示，或者转为字符串时，比较容易区分。"},{"level":3,"title":"8. Symbol 值可以显式转为字符串。","slug":"_8-symbol-值可以显式转为字符串。-1"},{"level":2,"title":"第三版","slug":"第三版"},{"level":3,"title":"9. Symbol 值可以作为标识符，用于对象的属性名，可以保证不会出现同名的属性。","slug":"_9-symbol-值可以作为标识符，用于对象的属性名，可以保证不会出现同名的属性。-1"},{"level":2,"title":"第四版","slug":"第四版"},{"level":3,"title":"7.Symbol 值不能与其他类型的值进行运算，会报错","slug":"_7-symbol-值不能与其他类型的值进行运算，会报错"},{"level":2,"title":"第五版","slug":"第五版"},{"level":3,"title":"10. Symbol 作为属性名，该属性不会出现在 for...in、for...of 循环中，也不会被 Object.keys()、Object.getOwnPropertyNames()、JSON.stringify() 返回。但是，它也不是私有属性，有一个 Object.getOwnPropertySymbols 方法，可以获取指定对象的所有 Symbol 属性名。","slug":"_10-symbol-作为属性名，该属性不会出现在-for-in、for-of-循环中，也不会被-object-keys-、object-getownpropertynames-、json-stringify-返回。但是，它也不是私有属性，有一个-object-getownpropertysymbols-方法，可以获取指定对象的所有-symbol-属性名。-1"},{"level":3,"title":"11. 有时，我们希望重新使用同一个Symbol值，Symbol.for方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的Symbol值。如果有，就返回这个Symbol值，否则就新建并返回一个以该字符串为名称的Symbol值。","slug":"_11-有时，我们希望重新使用同一个symbol值，symbol-for方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的symbol值。如果有，就返回这个symbol值，否则就新建并返回一个以该字符串为名称的symbol值。"},{"level":3,"title":"12. Symbol.keyFor 方法返回一个已登记的 Symbol 类型值的 key。","slug":"_12-symbol-keyfor-方法返回一个已登记的-symbol-类型值的-key。-1"},{"level":2,"title":"完整实现","slug":"完整实现"}],"relativePath":"learns/javascript/how-to-achieve-symbol.md","lastUpdated":1635388499005}',u={},i=t('<p><div class="table-of-contents"><ul><li><a href="#熟悉symbol几种特性">熟悉Symbol几种特性</a><ul><li><a href="#_1-symbol-值通过-symbol-函数生成，使用-typeof，结果为-symbol">1. Symbol 值通过 Symbol 函数生成，使用 typeof，结果为 &quot;symbol&quot;</a></li><li><a href="#_2-symbol-函数前不能使用-new-命令，否则会报错。这是因为生成的-symbol-是一个原始类型的值，不是对象。">2. Symbol 函数前不能使用 new 命令，否则会报错。这是因为生成的 Symbol 是一个原始类型的值，不是对象。</a></li><li><a href="#_3-instanceof-的结果为-false">3. instanceof 的结果为 false</a></li><li><a href="#_4-symbol-函数可以接受一个字符串作为参数，表示对-symbol-实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。">4. Symbol 函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。</a></li><li><a href="#_5-如果-symbol-的参数是一个对象，就会调用该对象的-tostring-方法，将其转为字符串，然后才生成一个-symbol-值。">5. 如果 Symbol 的参数是一个对象，就会调用该对象的 toString 方法，将其转为字符串，然后才生成一个 Symbol 值。</a></li><li><a href="#_6-symbol-函数的参数只是表示对当前-symbol-值的描述，相同参数的-symbol-函数的返回值是不相等的。">6. Symbol 函数的参数只是表示对当前 Symbol 值的描述，相同参数的 Symbol 函数的返回值是不相等的。</a></li><li><a href="#_7-symbol-值不能与其他类型的值进行运算，会报错。">7. Symbol 值不能与其他类型的值进行运算，会报错。</a></li><li><a href="#_8-symbol-值可以显式转为字符串。">8. Symbol 值可以显式转为字符串。</a></li><li><a href="#_9-symbol-值可以作为标识符，用于对象的属性名，可以保证不会出现同名的属性。">9. Symbol 值可以作为标识符，用于对象的属性名，可以保证不会出现同名的属性。</a></li><li><a href="#_10-symbol-作为属性名，该属性不会出现在-for-in、for-of-循环中，也不会被-object-keys-、object-getownpropertynames-、json-stringify-返回。但是，它也不是私有属性，有一个-object-getownpropertysymbols-方法，可以获取指定对象的所有-symbol-属性名。">10. Symbol 作为属性名，该属性不会出现在 for...in、for...of 循环中，也不会被 Object.keys()、Object.getOwnPropertyNames()、JSON.stringify() 返回。但是，它也不是私有属性，有一个 Object.getOwnPropertySymbols 方法，可以获取指定对象的所有 Symbol 属性名。</a></li><li><a href="#_11-如果我们希望使用同一个-symbol-值，可以使用-symbol-for。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的-symbol-值。如果有，就返回这个-symbol-值，否则就新建并返回一个以该字符串为名称的-symbol-值。">11. 如果我们希望使用同一个 Symbol 值，可以使用 Symbol.for。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建并返回一个以该字符串为名称的 Symbol 值。</a></li><li><a href="#_12-symbol-keyfor-方法返回一个已登记的-symbol-类型值的-key。">12. Symbol.keyFor 方法返回一个已登记的 Symbol 类型值的 key。</a></li></ul></li><li><a href="#分析">分析</a><ul><li><a href="#第一版">第一版</a></li></ul></li><li><a href="#第二版">第二版</a><ul><li><a href="#_1-使用-typeof，结果为-symbol-。">1. 使用 typeof，结果为 &quot;symbol&quot;。</a></li><li><a href="#_3-instanceof-的结果为-false">3. instanceof 的结果为 false</a></li><li><a href="#_4-symbol-函数可以接受一个字符串作为参数，表示对-symbol-实例的描述。主要是为了在控制台显示，或者转为字符串时，比较容易区分。">4. Symbol 函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述。主要是为了在控制台显示，或者转为字符串时，比较容易区分。</a></li><li><a href="#_8-symbol-值可以显式转为字符串。">8. Symbol 值可以显式转为字符串。</a></li></ul></li><li><a href="#第三版">第三版</a><ul><li><a href="#_9-symbol-值可以作为标识符，用于对象的属性名，可以保证不会出现同名的属性。">9. Symbol 值可以作为标识符，用于对象的属性名，可以保证不会出现同名的属性。</a></li></ul></li><li><a href="#第四版">第四版</a><ul><li><a href="#_7-symbol-值不能与其他类型的值进行运算，会报错">7.Symbol 值不能与其他类型的值进行运算，会报错</a></li></ul></li><li><a href="#第五版">第五版</a><ul><li><a href="#_10-symbol-作为属性名，该属性不会出现在-for-in、for-of-循环中，也不会被-object-keys-、object-getownpropertynames-、json-stringify-返回。但是，它也不是私有属性，有一个-object-getownpropertysymbols-方法，可以获取指定对象的所有-symbol-属性名。">10. Symbol 作为属性名，该属性不会出现在 for...in、for...of 循环中，也不会被 Object.keys()、Object.getOwnPropertyNames()、JSON.stringify() 返回。但是，它也不是私有属性，有一个 Object.getOwnPropertySymbols 方法，可以获取指定对象的所有 Symbol 属性名。</a></li><li><a href="#_11-有时，我们希望重新使用同一个symbol值，symbol-for方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的symbol值。如果有，就返回这个symbol值，否则就新建并返回一个以该字符串为名称的symbol值。">11. 有时，我们希望重新使用同一个Symbol值，Symbol.for方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的Symbol值。如果有，就返回这个Symbol值，否则就新建并返回一个以该字符串为名称的Symbol值。</a></li><li><a href="#_12-symbol-keyfor-方法返回一个已登记的-symbol-类型值的-key。">12. Symbol.keyFor 方法返回一个已登记的 Symbol 类型值的 key。</a></li></ul></li><li><a href="#完整实现">完整实现</a></li></ul></div></p><h1 id="模拟实现-symbol-类型" tabindex="-1">模拟实现 Symbol 类型 <a class="header-anchor" href="#模拟实现-symbol-类型" aria-hidden="true">#</a></h1><h2 id="熟悉symbol几种特性" tabindex="-1">熟悉Symbol几种特性 <a class="header-anchor" href="#熟悉symbol几种特性" aria-hidden="true">#</a></h2><p>ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。</p><h3 id="_1-symbol-值通过-symbol-函数生成，使用-typeof，结果为-symbol" tabindex="-1">1. Symbol 值通过 Symbol 函数生成，使用 typeof，结果为 &quot;symbol&quot; <a class="header-anchor" href="#_1-symbol-值通过-symbol-函数生成，使用-typeof，结果为-symbol" aria-hidden="true">#</a></h3>',5),k=l("div",{class:"language-js line-numbers-mode"},[l("pre",null,[l("code",null,[l("span",{class:"token keyword"},"typeof"),c(),l("span",{class:"token function"},"Symbol"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c(),l("span",{class:"token comment"},'// "symbol"'),c("\n")])]),l("div",{class:"line-numbers-wrapper"},[l("span",{class:"line-number"},"1"),l("br")])],-1),b=l("h3",{id:"_2-symbol-函数前不能使用-new-命令，否则会报错。这是因为生成的-symbol-是一个原始类型的值，不是对象。",tabindex:"-1"},[c("2. Symbol 函数前不能使用 new 命令，否则会报错。这是因为生成的 Symbol 是一个原始类型的值，不是对象。 "),l("a",{class:"header-anchor",href:"#_2-symbol-函数前不能使用-new-命令，否则会报错。这是因为生成的-symbol-是一个原始类型的值，不是对象。","aria-hidden":"true"},"#")],-1),m=l("div",{class:"language-js line-numbers-mode"},[l("pre",null,[l("code",null,[l("span",{class:"token keyword"},"new"),c(),l("span",{class:"token class-name"},"Symbol"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c(),l("span",{class:"token comment"},"// TypeError: Symbol is not a constructor"),c("\n")])]),l("div",{class:"line-numbers-wrapper"},[l("span",{class:"line-number"},"1"),l("br")])],-1),y=l("h3",{id:"_3-instanceof-的结果为-false",tabindex:"-1"},[c("3. instanceof 的结果为 false "),l("a",{class:"header-anchor",href:"#_3-instanceof-的结果为-false","aria-hidden":"true"},"#")],-1),d=l("div",{class:"language-js line-numbers-mode"},[l("pre",null,[l("code",null,[l("span",{class:"token keyword"},"var"),c(" s "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token function"},"Symbol"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},"'foo'"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\ns "),l("span",{class:"token keyword"},"instanceof"),c(),l("span",{class:"token class-name"},"Symbol"),l("span",{class:"token punctuation"},";"),c(),l("span",{class:"token comment"},"// false"),c("\n")])]),l("div",{class:"line-numbers-wrapper"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br")])],-1),f=l("h3",{id:"_4-symbol-函数可以接受一个字符串作为参数，表示对-symbol-实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。",tabindex:"-1"},[c("4. Symbol 函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。 "),l("a",{class:"header-anchor",href:"#_4-symbol-函数可以接受一个字符串作为参数，表示对-symbol-实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。","aria-hidden":"true"},"#")],-1),S=l("div",{class:"language-js line-numbers-mode"},[l("pre",null,[l("code",null,[c("s1 "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token function"},"Symbol"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},"'foo'"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c(),l("span",{class:"token comment"},"// Symbol(foo)"),c("\n")])]),l("div",{class:"line-numbers-wrapper"},[l("span",{class:"line-number"},"1"),l("br")])],-1),g=l("h3",{id:"_5-如果-symbol-的参数是一个对象，就会调用该对象的-tostring-方法，将其转为字符串，然后才生成一个-symbol-值。",tabindex:"-1"},[c("5. 如果 Symbol 的参数是一个对象，就会调用该对象的 toString 方法，将其转为字符串，然后才生成一个 Symbol 值。 "),l("a",{class:"header-anchor",href:"#_5-如果-symbol-的参数是一个对象，就会调用该对象的-tostring-方法，将其转为字符串，然后才生成一个-symbol-值。","aria-hidden":"true"},"#")],-1),w=l("div",{class:"language-js line-numbers-mode"},[l("pre",null,[l("code",null,[l("span",{class:"token keyword"},"const"),c(" obj "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token punctuation"},"{"),c("\n  "),l("span",{class:"token function"},"toString"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token punctuation"},"{"),c("\n    "),l("span",{class:"token keyword"},"return"),c(),l("span",{class:"token string"},"'abc'"),l("span",{class:"token punctuation"},";"),c("\n  "),l("span",{class:"token punctuation"},"}"),c("\n"),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},";"),c("\n"),l("span",{class:"token function"},"Symbol"),l("span",{class:"token punctuation"},"("),c("obj"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c(),l("span",{class:"token comment"},"// Symbol(abc)"),c("\n")])]),l("div",{class:"line-numbers-wrapper"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br"),l("span",{class:"line-number"},"6"),l("br")])],-1),h=l("h3",{id:"_6-symbol-函数的参数只是表示对当前-symbol-值的描述，相同参数的-symbol-函数的返回值是不相等的。",tabindex:"-1"},[c("6. Symbol 函数的参数只是表示对当前 Symbol 值的描述，相同参数的 Symbol 函数的返回值是不相等的。 "),l("a",{class:"header-anchor",href:"#_6-symbol-函数的参数只是表示对当前-symbol-值的描述，相同参数的-symbol-函数的返回值是不相等的。","aria-hidden":"true"},"#")],-1),_=l("div",{class:"language-js line-numbers-mode"},[l("pre",null,[l("code",null,[l("span",{class:"token comment"},"// 没有参数的情况"),c("\n"),l("span",{class:"token keyword"},"var"),c(" s1 "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token function"},"Symbol"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n"),l("span",{class:"token keyword"},"var"),c(" s2 "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token function"},"Symbol"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\ns1 "),l("span",{class:"token operator"},"==="),c(" s2"),l("span",{class:"token punctuation"},";"),c(),l("span",{class:"token comment"},"// false"),c("\n\n"),l("span",{class:"token comment"},"// 有参数的情况"),c("\n"),l("span",{class:"token keyword"},"var"),c(" s1 "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token function"},"Symbol"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},"'foo'"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n"),l("span",{class:"token keyword"},"var"),c(" s2 "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token function"},"Symbol"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},"'foo'"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\ns1 "),l("span",{class:"token operator"},"==="),c(" s2"),l("span",{class:"token punctuation"},";"),c(),l("span",{class:"token comment"},"// false"),c("\n")])]),l("div",{class:"line-numbers-wrapper"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br"),l("span",{class:"line-number"},"6"),l("br"),l("span",{class:"line-number"},"7"),l("br"),l("span",{class:"line-number"},"8"),l("br"),l("span",{class:"line-number"},"9"),l("br")])],-1),v=l("h3",{id:"_7-symbol-值不能与其他类型的值进行运算，会报错。",tabindex:"-1"},[c("7. Symbol 值不能与其他类型的值进行运算，会报错。 "),l("a",{class:"header-anchor",href:"#_7-symbol-值不能与其他类型的值进行运算，会报错。","aria-hidden":"true"},"#")],-1),j=l("div",{class:"language-js line-numbers-mode"},[l("pre",null,[l("code",null,[l("span",{class:"token keyword"},"var"),c(" sym "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token function"},"Symbol"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},"'My symbol'"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n\n"),l("span",{class:"token string"},'"your symbol is "'),c(),l("span",{class:"token operator"},"+"),c(" sym"),l("span",{class:"token punctuation"},";"),c(),l("span",{class:"token comment"},"// TypeError: can't convert symbol to string"),c("\n")])]),l("div",{class:"line-numbers-wrapper"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br")])],-1),O=l("h3",{id:"_8-symbol-值可以显式转为字符串。",tabindex:"-1"},[c("8. Symbol 值可以显式转为字符串。 "),l("a",{class:"header-anchor",href:"#_8-symbol-值可以显式转为字符串。","aria-hidden":"true"},"#")],-1),P=l("div",{class:"language-js line-numbers-mode"},[l("pre",null,[l("code",null,[l("span",{class:"token keyword"},"var"),c(" sym "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token function"},"Symbol"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},"'My symbol'"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n\n"),l("span",{class:"token function"},"String"),l("span",{class:"token punctuation"},"("),c("sym"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c(),l("span",{class:"token comment"},"// 'Symbol(My symbol)'"),c("\nsym"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"toString"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c(),l("span",{class:"token comment"},"// 'Symbol(My symbol)'"),c("\n")])]),l("div",{class:"line-numbers-wrapper"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br")])],-1),x=l("h3",{id:"_9-symbol-值可以作为标识符，用于对象的属性名，可以保证不会出现同名的属性。",tabindex:"-1"},[c("9. Symbol 值可以作为标识符，用于对象的属性名，可以保证不会出现同名的属性。 "),l("a",{class:"header-anchor",href:"#_9-symbol-值可以作为标识符，用于对象的属性名，可以保证不会出现同名的属性。","aria-hidden":"true"},"#")],-1),A=l("div",{class:"language-js line-numbers-mode"},[l("pre",null,[l("code",null,[l("span",{class:"token keyword"},"var"),c(" mySymbol "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token function"},"Symbol"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n\n"),l("span",{class:"token comment"},"// 第一种写法"),c("\n"),l("span",{class:"token keyword"},"var"),c(" a "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token punctuation"},"{"),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},";"),c("\na"),l("span",{class:"token punctuation"},"["),c("mySymbol"),l("span",{class:"token punctuation"},"]"),c(),l("span",{class:"token operator"},"="),c(),l("span",{class:"token string"},"'Hello!'"),l("span",{class:"token punctuation"},";"),c("\n\n"),l("span",{class:"token comment"},"// 第二种写法"),c("\n"),l("span",{class:"token keyword"},"var"),c(" a "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token punctuation"},"{"),c("\n  "),l("span",{class:"token punctuation"},"["),c("mySymbol"),l("span",{class:"token punctuation"},"]"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token string"},"'Hello!'"),c("\n"),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},";"),c("\n\n"),l("span",{class:"token comment"},"// 第三种写法"),c("\n"),l("span",{class:"token keyword"},"var"),c(" a "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token punctuation"},"{"),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},";"),c("\nObject"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"defineProperty"),l("span",{class:"token punctuation"},"("),c("a"),l("span",{class:"token punctuation"},","),c(" mySymbol"),l("span",{class:"token punctuation"},","),c(),l("span",{class:"token punctuation"},"{"),c(" value"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token string"},"'Hello!'"),c(),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n\n"),l("span",{class:"token comment"},"// 以上写法都得到同样结果"),c("\na"),l("span",{class:"token punctuation"},"["),c("mySymbol"),l("span",{class:"token punctuation"},"]"),l("span",{class:"token punctuation"},";"),c(),l("span",{class:"token comment"},'// "Hello!"'),c("\n")])]),l("div",{class:"line-numbers-wrapper"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br"),l("span",{class:"line-number"},"6"),l("br"),l("span",{class:"line-number"},"7"),l("br"),l("span",{class:"line-number"},"8"),l("br"),l("span",{class:"line-number"},"9"),l("br"),l("span",{class:"line-number"},"10"),l("br"),l("span",{class:"line-number"},"11"),l("br"),l("span",{class:"line-number"},"12"),l("br"),l("span",{class:"line-number"},"13"),l("br"),l("span",{class:"line-number"},"14"),l("br"),l("span",{class:"line-number"},"15"),l("br"),l("span",{class:"line-number"},"16"),l("br"),l("span",{class:"line-number"},"17"),l("br")])],-1),T=l("h3",{id:"_10-symbol-作为属性名，该属性不会出现在-for-in、for-of-循环中，也不会被-object-keys-、object-getownpropertynames-、json-stringify-返回。但是，它也不是私有属性，有一个-object-getownpropertysymbols-方法，可以获取指定对象的所有-symbol-属性名。",tabindex:"-1"},[c("10. Symbol 作为属性名，该属性不会出现在 for...in、for...of 循环中，也不会被 Object.keys()、Object.getOwnPropertyNames()、JSON.stringify() 返回。但是，它也不是私有属性，有一个 Object.getOwnPropertySymbols 方法，可以获取指定对象的所有 Symbol 属性名。 "),l("a",{class:"header-anchor",href:"#_10-symbol-作为属性名，该属性不会出现在-for-in、for-of-循环中，也不会被-object-keys-、object-getownpropertynames-、json-stringify-返回。但是，它也不是私有属性，有一个-object-getownpropertysymbols-方法，可以获取指定对象的所有-symbol-属性名。","aria-hidden":"true"},"#")],-1),N=l("div",{class:"language-js line-numbers-mode"},[l("pre",null,[l("code",null,[l("span",{class:"token keyword"},"var"),c(" obj "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token punctuation"},"{"),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},";"),c("\n"),l("span",{class:"token keyword"},"var"),c(" a "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token function"},"Symbol"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},"'a'"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n"),l("span",{class:"token keyword"},"var"),c(" b "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token function"},"Symbol"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},"'b'"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n\nobj"),l("span",{class:"token punctuation"},"["),c("a"),l("span",{class:"token punctuation"},"]"),c(),l("span",{class:"token operator"},"="),c(),l("span",{class:"token string"},"'Hello'"),l("span",{class:"token punctuation"},";"),c("\nobj"),l("span",{class:"token punctuation"},"["),c("b"),l("span",{class:"token punctuation"},"]"),c(),l("span",{class:"token operator"},"="),c(),l("span",{class:"token string"},"'World'"),l("span",{class:"token punctuation"},";"),c("\n\n"),l("span",{class:"token keyword"},"var"),c(" objectSymbols "),l("span",{class:"token operator"},"="),c(" Object"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"getOwnPropertySymbols"),l("span",{class:"token punctuation"},"("),c("obj"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n\nobjectSymbols"),l("span",{class:"token punctuation"},";"),c("\n"),l("span",{class:"token comment"},"// [Symbol(a), Symbol(b)]"),c("\n")])]),l("div",{class:"line-numbers-wrapper"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br"),l("span",{class:"line-number"},"6"),l("br"),l("span",{class:"line-number"},"7"),l("br"),l("span",{class:"line-number"},"8"),l("br"),l("span",{class:"line-number"},"9"),l("br"),l("span",{class:"line-number"},"10"),l("br"),l("span",{class:"line-number"},"11"),l("br")])],-1),M=l("h3",{id:"_11-如果我们希望使用同一个-symbol-值，可以使用-symbol-for。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的-symbol-值。如果有，就返回这个-symbol-值，否则就新建并返回一个以该字符串为名称的-symbol-值。",tabindex:"-1"},[c("11. 如果我们希望使用同一个 Symbol 值，可以使用 Symbol.for。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建并返回一个以该字符串为名称的 Symbol 值。 "),l("a",{class:"header-anchor",href:"#_11-如果我们希望使用同一个-symbol-值，可以使用-symbol-for。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的-symbol-值。如果有，就返回这个-symbol-值，否则就新建并返回一个以该字符串为名称的-symbol-值。","aria-hidden":"true"},"#")],-1),E=l("div",{class:"language-js line-numbers-mode"},[l("pre",null,[l("code",null,[l("span",{class:"token keyword"},"var"),c(" s1 "),l("span",{class:"token operator"},"="),c(" Symbol"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"for"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},"'foo'"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n"),l("span",{class:"token keyword"},"var"),c(" s2 "),l("span",{class:"token operator"},"="),c(" Symbol"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"for"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},"'foo'"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n\ns1 "),l("span",{class:"token operator"},"==="),c(" s2"),l("span",{class:"token punctuation"},";"),c(),l("span",{class:"token comment"},"// true"),c("\n")])]),l("div",{class:"line-numbers-wrapper"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br")])],-1),D=l("h3",{id:"_12-symbol-keyfor-方法返回一个已登记的-symbol-类型值的-key。",tabindex:"-1"},[c("12. Symbol.keyFor 方法返回一个已登记的 Symbol 类型值的 key。 "),l("a",{class:"header-anchor",href:"#_12-symbol-keyfor-方法返回一个已登记的-symbol-类型值的-key。","aria-hidden":"true"},"#")],-1),F=l("div",{class:"language-js line-numbers-mode"},[l("pre",null,[l("code",null,[l("span",{class:"token keyword"},"var"),c(" s1 "),l("span",{class:"token operator"},"="),c(" Symbol"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"for"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},'"foo"'),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\nSymbol"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"keyFor"),l("span",{class:"token punctuation"},"("),c("s1"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c(),l("span",{class:"token comment"},'// "foo"'),c("\n\n"),l("span",{class:"token keyword"},"var"),c(" s2 "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token function"},"Symbol"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},'"foo"'),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\nSymbol"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"keyFor"),l("span",{class:"token punctuation"},"("),c("s2"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c(),l("span",{class:"token comment"},"// undefined"),c("\n")])]),l("div",{class:"line-numbers-wrapper"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br")])],-1),C=t('<h2 id="分析" tabindex="-1">分析 <a class="header-anchor" href="#分析" aria-hidden="true">#</a></h2><p>看完以上的特性，你觉得哪些特性是可以模拟实现的呢？</p><p>当调用 Symbol 的时候，会采用以下步骤：</p><ul><li>如果使用 new ，就报错</li><li>如果 description 是 undefined，让 descString 为 undefined</li><li>否则 让 descString 为 ToString(description)</li><li>如果报错，就返回</li><li>返回一个新的唯一的 Symbol 值，它的内部属性 [[Description]] 值为 descString</li></ul><p>考虑到还需要定义一个 [[Description]] 属性，如果直接返回一个基本类型的值，是无法做到这一点的，所以我们最终还是返回一个对象。</p><h3 id="第一版" tabindex="-1">第一版 <a class="header-anchor" href="#第一版" aria-hidden="true">#</a></h3>',6),q=l("div",{class:"language-js line-numbers-mode"},[l("pre",null,[l("code",null,[l("span",{class:"token comment"},"// 第一版"),c("\n"),l("span",{class:"token punctuation"},"("),l("span",{class:"token keyword"},"function"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token punctuation"},"{"),c("\n  "),l("span",{class:"token keyword"},"var"),c(" root "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token keyword"},"this"),l("span",{class:"token punctuation"},";"),c("\n\n  "),l("span",{class:"token keyword"},"var"),c(),l("span",{class:"token function-variable function"},"SymbolPolyfill"),c(),l("span",{class:"token operator"},"="),c(),l("span",{class:"token keyword"},"function"),c(),l("span",{class:"token function"},"Symbol"),l("span",{class:"token punctuation"},"("),l("span",{class:"token parameter"},"description"),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token punctuation"},"{"),c("\n\n    "),l("span",{class:"token comment"},"// 实现特性第 2 点：Symbol 函数前不能使用 new 命令"),c("\n    "),l("span",{class:"token comment"},"// 可以用ES6 if (new.target !== void 0) 来判断是否使用new创建实例"),c("\n    "),l("span",{class:"token keyword"},"if"),c(),l("span",{class:"token punctuation"},"("),l("span",{class:"token keyword"},"this"),c(),l("span",{class:"token keyword"},"instanceof"),c(),l("span",{class:"token class-name"},"SymbolPolyfill"),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token keyword"},"throw"),c(),l("span",{class:"token keyword"},"new"),c(),l("span",{class:"token class-name"},"TypeError"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},"'Symbol is not a constructor'"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n\n    "),l("span",{class:"token comment"},"// 实现特性第 5 点：如果 Symbol 的参数是一个对象，就会调用该对象的 toString 方法，将其转为字符串，然后才生成一个 Symbol 值。"),c("\n    "),l("span",{class:"token keyword"},"var"),c(" descString "),l("span",{class:"token operator"},"="),c(" description "),l("span",{class:"token operator"},"==="),c(),l("span",{class:"token keyword"},"undefined"),c(),l("span",{class:"token operator"},"?"),c(),l("span",{class:"token keyword"},"undefined"),c(),l("span",{class:"token operator"},":"),c(),l("span",{class:"token function"},"String"),l("span",{class:"token punctuation"},"("),c("description"),l("span",{class:"token punctuation"},")"),c("\n\n    "),l("span",{class:"token keyword"},"var"),c(" symbol "),l("span",{class:"token operator"},"="),c(" Object"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"create"),l("span",{class:"token punctuation"},"("),l("span",{class:"token keyword"},"null"),l("span",{class:"token punctuation"},")"),c("\n\n    Object"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"defineProperties"),l("span",{class:"token punctuation"},"("),c("symbol"),l("span",{class:"token punctuation"},","),c(),l("span",{class:"token punctuation"},"{"),c("\n      "),l("span",{class:"token string"},"'__Description__'"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token punctuation"},"{"),c("\n        value"),l("span",{class:"token operator"},":"),c(" descString"),l("span",{class:"token punctuation"},","),c("\n        writable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"false"),l("span",{class:"token punctuation"},","),c("\n        enumerable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"false"),l("span",{class:"token punctuation"},","),c("\n        configurable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"false"),c("\n      "),l("span",{class:"token punctuation"},"}"),c("\n    "),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n\n    "),l("span",{class:"token comment"},"// 实现特性第 6 点，因为调用该方法，返回的是一个新对象，两个对象之间，只要引用不同，就不会相同"),c("\n    "),l("span",{class:"token keyword"},"return"),c(" symbol"),l("span",{class:"token punctuation"},";"),c("\n  "),l("span",{class:"token punctuation"},"}"),c("\n\n  root"),l("span",{class:"token punctuation"},"."),c("SymbolPolyfill "),l("span",{class:"token operator"},"="),c(" SymbolPolyfill"),l("span",{class:"token punctuation"},";"),c("\n"),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n")])]),l("div",{class:"line-numbers-wrapper"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br"),l("span",{class:"line-number"},"6"),l("br"),l("span",{class:"line-number"},"7"),l("br"),l("span",{class:"line-number"},"8"),l("br"),l("span",{class:"line-number"},"9"),l("br"),l("span",{class:"line-number"},"10"),l("br"),l("span",{class:"line-number"},"11"),l("br"),l("span",{class:"line-number"},"12"),l("br"),l("span",{class:"line-number"},"13"),l("br"),l("span",{class:"line-number"},"14"),l("br"),l("span",{class:"line-number"},"15"),l("br"),l("span",{class:"line-number"},"16"),l("br"),l("span",{class:"line-number"},"17"),l("br"),l("span",{class:"line-number"},"18"),l("br"),l("span",{class:"line-number"},"19"),l("br"),l("span",{class:"line-number"},"20"),l("br"),l("span",{class:"line-number"},"21"),l("br"),l("span",{class:"line-number"},"22"),l("br"),l("span",{class:"line-number"},"23"),l("br"),l("span",{class:"line-number"},"24"),l("br"),l("span",{class:"line-number"},"25"),l("br"),l("span",{class:"line-number"},"26"),l("br"),l("span",{class:"line-number"},"27"),l("br"),l("span",{class:"line-number"},"28"),l("br"),l("span",{class:"line-number"},"29"),l("br"),l("span",{class:"line-number"},"30"),l("br")])],-1),I=t('<p>只是参照着规范，我们已经实现了特性的第 2、5、6 点。</p><h2 id="第二版" tabindex="-1">第二版 <a class="header-anchor" href="#第二版" aria-hidden="true">#</a></h2><p>我们来看看其他的特性该如何实现：</p><h3 id="_1-使用-typeof，结果为-symbol-。" tabindex="-1">1. 使用 typeof，结果为 &quot;symbol&quot;。 <a class="header-anchor" href="#_1-使用-typeof，结果为-symbol-。" aria-hidden="true">#</a></h3><p>利用 ES5，我们并不能修改 typeof 操作符的结果，所以这个无法实现。</p><h3 id="_3-instanceof-的结果为-false-1" tabindex="-1">3. instanceof 的结果为 false <a class="header-anchor" href="#_3-instanceof-的结果为-false-1" aria-hidden="true">#</a></h3><p>因为不是通过 new 的方式实现的，所以 instanceof 的结果自然是 false。</p><h3 id="_4-symbol-函数可以接受一个字符串作为参数，表示对-symbol-实例的描述。主要是为了在控制台显示，或者转为字符串时，比较容易区分。" tabindex="-1">4. Symbol 函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述。主要是为了在控制台显示，或者转为字符串时，比较容易区分。 <a class="header-anchor" href="#_4-symbol-函数可以接受一个字符串作为参数，表示对-symbol-实例的描述。主要是为了在控制台显示，或者转为字符串时，比较容易区分。" aria-hidden="true">#</a></h3><p>当我们打印一个原生 Symbol 值的时候：</p>',9),V=l("div",{class:"language-js line-numbers-mode"},[l("pre",null,[l("code",null,[c("console"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"log"),l("span",{class:"token punctuation"},"("),l("span",{class:"token function"},"Symbol"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},"'1'"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c(),l("span",{class:"token comment"},"// Symbol(1)"),c("\n")])]),l("div",{class:"line-numbers-wrapper"},[l("span",{class:"line-number"},"1"),l("br")])],-1),J=l("p",null,"可是我们模拟实现的时候返回的却是一个对象，所以这个也是无法实现的，当然你修改 console.log 这个方法是另讲。",-1),H=l("h3",{id:"_8-symbol-值可以显式转为字符串。-1",tabindex:"-1"},[c("8. Symbol 值可以显式转为字符串。 "),l("a",{class:"header-anchor",href:"#_8-symbol-值可以显式转为字符串。-1","aria-hidden":"true"},"#")],-1),R=l("div",{class:"language-js line-numbers-mode"},[l("pre",null,[l("code",null,[l("span",{class:"token keyword"},"var"),c(" sym "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token function"},"Symbol"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},"'My symbol'"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n\nconsole"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"log"),l("span",{class:"token punctuation"},"("),l("span",{class:"token function"},"String"),l("span",{class:"token punctuation"},"("),c("sym"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c(),l("span",{class:"token comment"},"// 'Symbol(My symbol)'"),c("\nconsole"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"log"),l("span",{class:"token punctuation"},"("),c("sym"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"toString"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c(),l("span",{class:"token comment"},"// 'Symbol(My symbol)'"),c("\n")])]),l("div",{class:"line-numbers-wrapper"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br")])],-1),U=l("p",null,"当调用 String 方法的时候，如果该对象有 toString 方法，就会调用该 toString 方法，所以我们只要给返回的对象添加一个 toString 方法，即可实现这两个效果。",-1),W=l("div",{class:"language-js line-numbers-mode"},[l("pre",null,[l("code",null,[l("span",{class:"token comment"},"// 第二版"),c("\n\n"),l("span",{class:"token comment"},"// 前面面代码相同 ……"),c("\n\n"),l("span",{class:"token keyword"},"var"),c(" symbol "),l("span",{class:"token operator"},"="),c(" Object"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"create"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},"{"),c("\n    "),l("span",{class:"token function-variable function"},"toString"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token keyword"},"function"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token punctuation"},"{"),c("\n        "),l("span",{class:"token keyword"},"return"),c(),l("span",{class:"token string"},"'Symbol('"),c(),l("span",{class:"token operator"},"+"),c(),l("span",{class:"token keyword"},"this"),l("span",{class:"token punctuation"},"."),c("__Description__ "),l("span",{class:"token operator"},"+"),c(),l("span",{class:"token string"},"')'"),l("span",{class:"token punctuation"},";"),c("\n    "),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},","),c("\n"),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n\n"),l("span",{class:"token comment"},"// 后面代码相同 ……"),c("\n")])]),l("div",{class:"line-numbers-wrapper"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br"),l("span",{class:"line-number"},"6"),l("br"),l("span",{class:"line-number"},"7"),l("br"),l("span",{class:"line-number"},"8"),l("br"),l("span",{class:"line-number"},"9"),l("br"),l("span",{class:"line-number"},"10"),l("br"),l("span",{class:"line-number"},"11"),l("br")])],-1),z=l("h2",{id:"第三版",tabindex:"-1"},[c("第三版 "),l("a",{class:"header-anchor",href:"#第三版","aria-hidden":"true"},"#")],-1),B=l("h3",{id:"_9-symbol-值可以作为标识符，用于对象的属性名，可以保证不会出现同名的属性。-1",tabindex:"-1"},[c("9. Symbol 值可以作为标识符，用于对象的属性名，可以保证不会出现同名的属性。 "),l("a",{class:"header-anchor",href:"#_9-symbol-值可以作为标识符，用于对象的属性名，可以保证不会出现同名的属性。-1","aria-hidden":"true"},"#")],-1),G=l("p",null,"看着好像没什么，这点其实和第 8 点是冲突的，这是因为当我们模拟的所谓 Symbol 值其实是一个有着 toString 方法的 对象，当对象作为对象的属性名的时候，就会进行隐式类型转换，还是会调用我们添加的 toString 方法，对于 Symbol('foo') 和 Symbol('foo')两个 Symbol 值，虽然描述一样，但是因为是两个对象，所以并不相等，但是当作为对象的属性名的时候，都会隐式转换为 Symbol(foo) 字符串，这个时候就会造成同名的属性。举个例子：",-1),K=l("div",{class:"language-js line-numbers-mode"},[l("pre",null,[l("code",null,[l("span",{class:"token keyword"},"var"),c(" a "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token function"},"SymbolPolyfill"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},"'foo'"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n"),l("span",{class:"token keyword"},"var"),c(" b "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token function"},"SymbolPolyfill"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},"'foo'"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n\nconsole"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"log"),l("span",{class:"token punctuation"},"("),c("a "),l("span",{class:"token operator"},"==="),c("  b"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c(),l("span",{class:"token comment"},"// false"),c("\n\n"),l("span",{class:"token keyword"},"var"),c(" o "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token punctuation"},"{"),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},";"),c("\no"),l("span",{class:"token punctuation"},"["),c("a"),l("span",{class:"token punctuation"},"]"),c(),l("span",{class:"token operator"},"="),c(),l("span",{class:"token string"},"'hello'"),l("span",{class:"token punctuation"},";"),c("\no"),l("span",{class:"token punctuation"},"["),c("b"),l("span",{class:"token punctuation"},"]"),c(),l("span",{class:"token operator"},"="),c(),l("span",{class:"token string"},"'hi'"),l("span",{class:"token punctuation"},";"),c("\n\nconsole"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"log"),l("span",{class:"token punctuation"},"("),c("o"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c(),l("span",{class:"token comment"},"// {Symbol(foo): 'hi'}"),c("\n")])]),l("div",{class:"line-numbers-wrapper"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br"),l("span",{class:"line-number"},"6"),l("br"),l("span",{class:"line-number"},"7"),l("br"),l("span",{class:"line-number"},"8"),l("br"),l("span",{class:"line-number"},"9"),l("br"),l("span",{class:"line-number"},"10"),l("br")])],-1),L=l("p",null,[c("为了防止不会出现同名的属性，毕竟这是一个非常重要的特性，迫不得已，我们需要修改 toString 方法，让它返回一个唯一值，所以第 8 点就无法实现了，而且我们还需要再写一个用来生成 唯一值的方法，就命名为 generateName，我们将该唯一值添加到返回对象的 "),l("strong",null,"Name"),c(" 属性中保存下来。")],-1),Q=l("div",{class:"language-js line-numbers-mode"},[l("pre",null,[l("code",null,[l("span",{class:"token comment"},"// 第三版"),c("\n"),l("span",{class:"token punctuation"},"("),l("span",{class:"token keyword"},"function"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token punctuation"},"{"),c("\n  "),l("span",{class:"token keyword"},"var"),c(" root "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token keyword"},"this"),l("span",{class:"token punctuation"},";"),c("\n\n  "),l("span",{class:"token keyword"},"var"),c(" generateName "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token punctuation"},"("),l("span",{class:"token keyword"},"function"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},"{"),c("\n    "),l("span",{class:"token keyword"},"var"),c(" postfix "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token number"},"0"),l("span",{class:"token punctuation"},";"),c("\n    "),l("span",{class:"token keyword"},"return"),c(),l("span",{class:"token keyword"},"function"),l("span",{class:"token punctuation"},"("),l("span",{class:"token parameter"},"descString"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},"{"),c("\n      postfix"),l("span",{class:"token operator"},"++"),l("span",{class:"token punctuation"},";"),c("\n      "),l("span",{class:"token keyword"},"return"),c(),l("span",{class:"token string"},"'@@'"),c(),l("span",{class:"token operator"},"+"),c(" descString "),l("span",{class:"token operator"},"+"),c(),l("span",{class:"token string"},"'_'"),c(),l("span",{class:"token operator"},"+"),c(" postfix\n    "),l("span",{class:"token punctuation"},"}"),c("\n  "),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),c("\n\n  "),l("span",{class:"token keyword"},"var"),c(),l("span",{class:"token function-variable function"},"SymbolPolyfill"),c(),l("span",{class:"token operator"},"="),c(),l("span",{class:"token keyword"},"function"),c(),l("span",{class:"token function"},"Symbol"),l("span",{class:"token punctuation"},"("),l("span",{class:"token parameter"},"description"),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token punctuation"},"{"),c("\n\n    "),l("span",{class:"token keyword"},"if"),c(),l("span",{class:"token punctuation"},"("),l("span",{class:"token keyword"},"this"),c(),l("span",{class:"token keyword"},"instanceof"),c(),l("span",{class:"token class-name"},"SymbolPolyfill"),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token keyword"},"throw"),c(),l("span",{class:"token keyword"},"new"),c(),l("span",{class:"token class-name"},"TypeError"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},"'Symbol is not a constructor'"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n\n    "),l("span",{class:"token keyword"},"var"),c(" descString "),l("span",{class:"token operator"},"="),c(" description "),l("span",{class:"token operator"},"==="),c(),l("span",{class:"token keyword"},"undefined"),c(),l("span",{class:"token operator"},"?"),c(),l("span",{class:"token keyword"},"undefined"),c(),l("span",{class:"token operator"},":"),c(),l("span",{class:"token function"},"String"),l("span",{class:"token punctuation"},"("),c("description"),l("span",{class:"token punctuation"},")"),c("\n\n    "),l("span",{class:"token keyword"},"var"),c(" symbol "),l("span",{class:"token operator"},"="),c(" Object"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"create"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},"{"),c("\n      "),l("span",{class:"token function-variable function"},"toString"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token keyword"},"function"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token punctuation"},"{"),c("\n        "),l("span",{class:"token keyword"},"return"),c(),l("span",{class:"token keyword"},"this"),l("span",{class:"token punctuation"},"."),c("__Name__"),l("span",{class:"token punctuation"},";"),c("\n      "),l("span",{class:"token punctuation"},"}"),c("\n    "),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},")"),c("\n\n    Object"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"defineProperties"),l("span",{class:"token punctuation"},"("),c("symbol"),l("span",{class:"token punctuation"},","),c(),l("span",{class:"token punctuation"},"{"),c("\n      "),l("span",{class:"token string"},"'__Description__'"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token punctuation"},"{"),c("\n        value"),l("span",{class:"token operator"},":"),c(" descString"),l("span",{class:"token punctuation"},","),c("\n        writable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"false"),l("span",{class:"token punctuation"},","),c("\n        enumerable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"false"),l("span",{class:"token punctuation"},","),c("\n        configurable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"false"),c("\n      "),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},","),c("\n      "),l("span",{class:"token string"},"'__Name__'"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token punctuation"},"{"),c("\n        value"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token function"},"generateName"),l("span",{class:"token punctuation"},"("),c("descString"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},","),c("\n        writable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"false"),l("span",{class:"token punctuation"},","),c("\n        enumerable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"false"),l("span",{class:"token punctuation"},","),c("\n        configurable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"false"),c("\n      "),l("span",{class:"token punctuation"},"}"),c("\n    "),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n\n    "),l("span",{class:"token keyword"},"return"),c(" symbol"),l("span",{class:"token punctuation"},";"),c("\n  "),l("span",{class:"token punctuation"},"}"),c("\n\n  root"),l("span",{class:"token punctuation"},"."),c("SymbolPolyfill "),l("span",{class:"token operator"},"="),c(" SymbolPolyfill"),l("span",{class:"token punctuation"},";"),c("\n"),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n\n\n"),l("span",{class:"token keyword"},"var"),c(" a "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token function"},"SymbolPolyfill"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},"'foo'"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n"),l("span",{class:"token keyword"},"var"),c(" b "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token function"},"SymbolPolyfill"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},"'foo'"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n\nconsole"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"log"),l("span",{class:"token punctuation"},"("),c("a "),l("span",{class:"token operator"},"==="),c("  b"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c(),l("span",{class:"token comment"},"// false"),c("\n\n"),l("span",{class:"token keyword"},"var"),c(" o "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token punctuation"},"{"),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},";"),c("\no"),l("span",{class:"token punctuation"},"["),c("a"),l("span",{class:"token punctuation"},"]"),c(),l("span",{class:"token operator"},"="),c(),l("span",{class:"token string"},"'hello'"),l("span",{class:"token punctuation"},";"),c("\no"),l("span",{class:"token punctuation"},"["),c("b"),l("span",{class:"token punctuation"},"]"),c(),l("span",{class:"token operator"},"="),c(),l("span",{class:"token string"},"'hi'"),l("span",{class:"token punctuation"},";"),c("\n\nconsole"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"log"),l("span",{class:"token punctuation"},"("),c("o"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c(),l("span",{class:"token comment"},'// Object { "@@foo_1": "hello", "@@foo_2": "hi" }'),c("\n")])]),l("div",{class:"line-numbers-wrapper"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br"),l("span",{class:"line-number"},"6"),l("br"),l("span",{class:"line-number"},"7"),l("br"),l("span",{class:"line-number"},"8"),l("br"),l("span",{class:"line-number"},"9"),l("br"),l("span",{class:"line-number"},"10"),l("br"),l("span",{class:"line-number"},"11"),l("br"),l("span",{class:"line-number"},"12"),l("br"),l("span",{class:"line-number"},"13"),l("br"),l("span",{class:"line-number"},"14"),l("br"),l("span",{class:"line-number"},"15"),l("br"),l("span",{class:"line-number"},"16"),l("br"),l("span",{class:"line-number"},"17"),l("br"),l("span",{class:"line-number"},"18"),l("br"),l("span",{class:"line-number"},"19"),l("br"),l("span",{class:"line-number"},"20"),l("br"),l("span",{class:"line-number"},"21"),l("br"),l("span",{class:"line-number"},"22"),l("br"),l("span",{class:"line-number"},"23"),l("br"),l("span",{class:"line-number"},"24"),l("br"),l("span",{class:"line-number"},"25"),l("br"),l("span",{class:"line-number"},"26"),l("br"),l("span",{class:"line-number"},"27"),l("br"),l("span",{class:"line-number"},"28"),l("br"),l("span",{class:"line-number"},"29"),l("br"),l("span",{class:"line-number"},"30"),l("br"),l("span",{class:"line-number"},"31"),l("br"),l("span",{class:"line-number"},"32"),l("br"),l("span",{class:"line-number"},"33"),l("br"),l("span",{class:"line-number"},"34"),l("br"),l("span",{class:"line-number"},"35"),l("br"),l("span",{class:"line-number"},"36"),l("br"),l("span",{class:"line-number"},"37"),l("br"),l("span",{class:"line-number"},"38"),l("br"),l("span",{class:"line-number"},"39"),l("br"),l("span",{class:"line-number"},"40"),l("br"),l("span",{class:"line-number"},"41"),l("br"),l("span",{class:"line-number"},"42"),l("br"),l("span",{class:"line-number"},"43"),l("br"),l("span",{class:"line-number"},"44"),l("br"),l("span",{class:"line-number"},"45"),l("br"),l("span",{class:"line-number"},"46"),l("br"),l("span",{class:"line-number"},"47"),l("br"),l("span",{class:"line-number"},"48"),l("br"),l("span",{class:"line-number"},"49"),l("br"),l("span",{class:"line-number"},"50"),l("br"),l("span",{class:"line-number"},"51"),l("br"),l("span",{class:"line-number"},"52"),l("br"),l("span",{class:"line-number"},"53"),l("br"),l("span",{class:"line-number"},"54"),l("br"),l("span",{class:"line-number"},"55"),l("br"),l("span",{class:"line-number"},"56"),l("br")])],-1),X=l("h2",{id:"第四版",tabindex:"-1"},[c("第四版 "),l("a",{class:"header-anchor",href:"#第四版","aria-hidden":"true"},"#")],-1),Y=l("p",null,"我们再看看接下来的特性。",-1),Z=l("h3",{id:"_7-symbol-值不能与其他类型的值进行运算，会报错",tabindex:"-1"},[c("7.Symbol 值不能与其他类型的值进行运算，会报错 "),l("a",{class:"header-anchor",href:"#_7-symbol-值不能与其他类型的值进行运算，会报错","aria-hidden":"true"},"#")],-1),$=l("p",null,"以 + 操作符为例，当进行隐式类型转换的时候，会先调用对象的 valueOf 方法，如果没有返回基本值，就会再调用 toString 方法，所以我们考虑在 valueOf 方法中进行报错，比如：",-1),nn=l("div",{class:"language-js line-numbers-mode"},[l("pre",null,[l("code",null,[l("span",{class:"token keyword"},"var"),c(" symbol "),l("span",{class:"token operator"},"="),c(" Object"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"create"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},"{"),c("\n    "),l("span",{class:"token function-variable function"},"valueOf"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token keyword"},"function"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token punctuation"},"{"),c("\n        "),l("span",{class:"token keyword"},"throw"),c(),l("span",{class:"token keyword"},"new"),c(),l("span",{class:"token class-name"},"Error"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},"'Cannot convert a Symbol value'"),l("span",{class:"token punctuation"},")"),c("\n    "),l("span",{class:"token punctuation"},"}"),c("\n"),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},")"),c("\n\nconsole"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"log"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},"'1'"),c(),l("span",{class:"token operator"},"+"),c(" symbol"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c(),l("span",{class:"token comment"},"// 报错"),c("\n")])]),l("div",{class:"line-numbers-wrapper"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br"),l("span",{class:"line-number"},"6"),l("br"),l("span",{class:"line-number"},"7"),l("br")])],-1),sn=l("p",null,"看着很简单的解决了这个问题，可是如果我们是显式调用 valueOf 方法呢？对于一个原生的 Symbol 值：",-1),an=l("div",{class:"language-js line-numbers-mode"},[l("pre",null,[l("code",null,[l("span",{class:"token keyword"},"var"),c(" s1 "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token function"},"Symbol"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},"'foo'"),l("span",{class:"token punctuation"},")"),c("\nconsole"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"log"),l("span",{class:"token punctuation"},"("),c("s1"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"valueOf"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c(),l("span",{class:"token comment"},"// Symbol(foo)"),c("\n")])]),l("div",{class:"line-numbers-wrapper"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br")])],-1),on=l("p",null,"是的，对于原生 Symbol，显式调用 valueOf 方法，会直接返回该 Symbol 值，而我们又无法判断是显式还是隐式的调用，所以这个我们就只能实现一半，要不然实现隐式调用报错，要不然实现显式调用返回该值，那……我们选择不报错的那个吧，即后者。",-1),en=l("p",null,"我们迫不得已的修改 valueOf 函数：",-1),tn=l("div",{class:"language-js line-numbers-mode"},[l("pre",null,[l("code",null,[l("span",{class:"token comment"},"// 第四版"),c("\n"),l("span",{class:"token comment"},"// 前面面代码相同 ……"),c("\n\n"),l("span",{class:"token keyword"},"var"),c(" symbol "),l("span",{class:"token operator"},"="),c(" Object"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"create"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},"{"),c("\n  "),l("span",{class:"token function-variable function"},"toString"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token keyword"},"function"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token punctuation"},"{"),c("\n      "),l("span",{class:"token keyword"},"return"),c(),l("span",{class:"token keyword"},"this"),l("span",{class:"token punctuation"},"."),c("__Name__"),l("span",{class:"token punctuation"},";"),c("\n  "),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},","),c("\n  "),l("span",{class:"token function-variable function"},"valueOf"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token keyword"},"function"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token punctuation"},"{"),c("\n      "),l("span",{class:"token keyword"},"return"),c(),l("span",{class:"token keyword"},"this"),l("span",{class:"token punctuation"},";"),c("\n  "),l("span",{class:"token punctuation"},"}"),c("\n"),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n"),l("span",{class:"token comment"},"// 后面代码相同 ……"),c("\n")])]),l("div",{class:"line-numbers-wrapper"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br"),l("span",{class:"line-number"},"6"),l("br"),l("span",{class:"line-number"},"7"),l("br"),l("span",{class:"line-number"},"8"),l("br"),l("span",{class:"line-number"},"9"),l("br"),l("span",{class:"line-number"},"10"),l("br"),l("span",{class:"line-number"},"11"),l("br"),l("span",{class:"line-number"},"12"),l("br")])],-1),ln=t('<h2 id="第五版" tabindex="-1">第五版 <a class="header-anchor" href="#第五版" aria-hidden="true">#</a></h2><h3 id="_10-symbol-作为属性名，该属性不会出现在-for-in、for-of-循环中，也不会被-object-keys-、object-getownpropertynames-、json-stringify-返回。但是，它也不是私有属性，有一个-object-getownpropertysymbols-方法，可以获取指定对象的所有-symbol-属性名。-1" tabindex="-1">10. Symbol 作为属性名，该属性不会出现在 for...in、for...of 循环中，也不会被 Object.keys()、Object.getOwnPropertyNames()、JSON.stringify() 返回。但是，它也不是私有属性，有一个 Object.getOwnPropertySymbols 方法，可以获取指定对象的所有 Symbol 属性名。 <a class="header-anchor" href="#_10-symbol-作为属性名，该属性不会出现在-for-in、for-of-循环中，也不会被-object-keys-、object-getownpropertynames-、json-stringify-返回。但是，它也不是私有属性，有一个-object-getownpropertysymbols-方法，可以获取指定对象的所有-symbol-属性名。-1" aria-hidden="true">#</a></h3><p>嗯，无法实现。</p><h3 id="_11-有时，我们希望重新使用同一个symbol值，symbol-for方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的symbol值。如果有，就返回这个symbol值，否则就新建并返回一个以该字符串为名称的symbol值。" tabindex="-1">11. 有时，我们希望重新使用同一个Symbol值，Symbol.for方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的Symbol值。如果有，就返回这个Symbol值，否则就新建并返回一个以该字符串为名称的Symbol值。 <a class="header-anchor" href="#_11-有时，我们希望重新使用同一个symbol值，symbol-for方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的symbol值。如果有，就返回这个symbol值，否则就新建并返回一个以该字符串为名称的symbol值。" aria-hidden="true">#</a></h3><p>这个实现类似于函数记忆，我们建立一个对象，用来储存已经创建的 Symbol 值即可。</p><h3 id="_12-symbol-keyfor-方法返回一个已登记的-symbol-类型值的-key。-1" tabindex="-1">12. Symbol.keyFor 方法返回一个已登记的 Symbol 类型值的 key。 <a class="header-anchor" href="#_12-symbol-keyfor-方法返回一个已登记的-symbol-类型值的-key。-1" aria-hidden="true">#</a></h3><p>遍历 forMap,查找该值对应的键值即可。</p>',7),cn=l("div",{class:"language-js line-numbers-mode"},[l("pre",null,[l("code",null,[l("span",{class:"token comment"},"// 第五版"),c("\n"),l("span",{class:"token comment"},"// 前面代码相同 ……"),c("\n"),l("span",{class:"token keyword"},"var"),c(),l("span",{class:"token function-variable function"},"SymbolPolyfill"),c(),l("span",{class:"token operator"},"="),c(),l("span",{class:"token keyword"},"function"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token punctuation"},"{"),c(),l("span",{class:"token operator"},"..."),c(),l("span",{class:"token punctuation"},"}"),c("\n\n"),l("span",{class:"token keyword"},"var"),c(" forMap "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token punctuation"},"{"),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},";"),c("\n\nObject"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"defineProperties"),l("span",{class:"token punctuation"},"("),c("SymbolPolyfill"),l("span",{class:"token punctuation"},","),c(),l("span",{class:"token punctuation"},"{"),c("\n  "),l("span",{class:"token string"},"'for'"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token punctuation"},"{"),c("\n    "),l("span",{class:"token function-variable function"},"value"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token keyword"},"function"),l("span",{class:"token punctuation"},"("),l("span",{class:"token parameter"},"description"),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token punctuation"},"{"),c("\n      "),l("span",{class:"token keyword"},"var"),c(" descString "),l("span",{class:"token operator"},"="),c(" description "),l("span",{class:"token operator"},"==="),c(),l("span",{class:"token keyword"},"undefined"),c(),l("span",{class:"token operator"},"?"),c(),l("span",{class:"token keyword"},"undefined"),c(),l("span",{class:"token operator"},":"),c(),l("span",{class:"token function"},"String"),l("span",{class:"token punctuation"},"("),c("description"),l("span",{class:"token punctuation"},")"),c("\n      "),l("span",{class:"token keyword"},"return"),c(" forMap"),l("span",{class:"token punctuation"},"["),c("descString"),l("span",{class:"token punctuation"},"]"),c(),l("span",{class:"token operator"},"?"),c(" forMap"),l("span",{class:"token punctuation"},"["),c("descString"),l("span",{class:"token punctuation"},"]"),c(),l("span",{class:"token operator"},":"),c(" forMap"),l("span",{class:"token punctuation"},"["),c("descString"),l("span",{class:"token punctuation"},"]"),c(),l("span",{class:"token operator"},"="),c(),l("span",{class:"token function"},"SymbolPolyfill"),l("span",{class:"token punctuation"},"("),c("descString"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n    "),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},","),c("\n    writable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"true"),l("span",{class:"token punctuation"},","),c("\n    enumerable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"false"),l("span",{class:"token punctuation"},","),c("\n    configurable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"true"),c("\n  "),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},","),c("\n  "),l("span",{class:"token string"},"'keyFor'"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token punctuation"},"{"),c("\n    "),l("span",{class:"token function-variable function"},"value"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token keyword"},"function"),l("span",{class:"token punctuation"},"("),l("span",{class:"token parameter"},"symbol"),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token punctuation"},"{"),c("\n      "),l("span",{class:"token keyword"},"for"),c(),l("span",{class:"token punctuation"},"("),l("span",{class:"token keyword"},"var"),c(" key "),l("span",{class:"token keyword"},"in"),c(" forMap"),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token punctuation"},"{"),c("\n        "),l("span",{class:"token keyword"},"if"),c(),l("span",{class:"token punctuation"},"("),c("forMap"),l("span",{class:"token punctuation"},"["),c("key"),l("span",{class:"token punctuation"},"]"),c(),l("span",{class:"token operator"},"==="),c(" symbol"),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token keyword"},"return"),c(" key"),l("span",{class:"token punctuation"},";"),c("\n      "),l("span",{class:"token punctuation"},"}"),c("\n    "),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},","),c("\n    writable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"true"),l("span",{class:"token punctuation"},","),c("\n    enumerable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"false"),l("span",{class:"token punctuation"},","),c("\n    configurable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"true"),c("\n  "),l("span",{class:"token punctuation"},"}"),c("\n"),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n"),l("span",{class:"token comment"},"// 后面代码相同 ……"),c("\n")])]),l("div",{class:"line-numbers-wrapper"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br"),l("span",{class:"line-number"},"6"),l("br"),l("span",{class:"line-number"},"7"),l("br"),l("span",{class:"line-number"},"8"),l("br"),l("span",{class:"line-number"},"9"),l("br"),l("span",{class:"line-number"},"10"),l("br"),l("span",{class:"line-number"},"11"),l("br"),l("span",{class:"line-number"},"12"),l("br"),l("span",{class:"line-number"},"13"),l("br"),l("span",{class:"line-number"},"14"),l("br"),l("span",{class:"line-number"},"15"),l("br"),l("span",{class:"line-number"},"16"),l("br"),l("span",{class:"line-number"},"17"),l("br"),l("span",{class:"line-number"},"18"),l("br"),l("span",{class:"line-number"},"19"),l("br"),l("span",{class:"line-number"},"20"),l("br"),l("span",{class:"line-number"},"21"),l("br"),l("span",{class:"line-number"},"22"),l("br"),l("span",{class:"line-number"},"23"),l("br"),l("span",{class:"line-number"},"24"),l("br"),l("span",{class:"line-number"},"25"),l("br"),l("span",{class:"line-number"},"26"),l("br"),l("span",{class:"line-number"},"27"),l("br"),l("span",{class:"line-number"},"28"),l("br")])],-1),pn=l("h2",{id:"完整实现",tabindex:"-1"},[c("完整实现 "),l("a",{class:"header-anchor",href:"#完整实现","aria-hidden":"true"},"#")],-1),rn=l("p",null,"综上所述：",-1),un=l("p",null,"无法实现的特性有：1、4、7、8、10",-1),kn=l("p",null,"可以实现的特性有：2、3、5、6、9、11、12",-1),bn=l("p",null,"最后的实现如下:",-1),mn=l("div",{class:"language-js line-numbers-mode"},[l("pre",null,[l("code",null,[l("span",{class:"token punctuation"},"("),l("span",{class:"token keyword"},"function"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token punctuation"},"{"),c("\n  "),l("span",{class:"token keyword"},"var"),c(" root "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token keyword"},"this"),l("span",{class:"token punctuation"},";"),c("\n\n  "),l("span",{class:"token keyword"},"var"),c(" generateName "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token punctuation"},"("),l("span",{class:"token keyword"},"function"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},"{"),c("\n    "),l("span",{class:"token keyword"},"var"),c(" postfix "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token number"},"0"),l("span",{class:"token punctuation"},";"),c("\n    "),l("span",{class:"token keyword"},"return"),c(),l("span",{class:"token keyword"},"function"),l("span",{class:"token punctuation"},"("),l("span",{class:"token parameter"},"descString"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},"{"),c("\n      postfix"),l("span",{class:"token operator"},"++"),l("span",{class:"token punctuation"},";"),c("\n      "),l("span",{class:"token keyword"},"return"),c(),l("span",{class:"token string"},"'@@'"),c(),l("span",{class:"token operator"},"+"),c(" descString "),l("span",{class:"token operator"},"+"),c(),l("span",{class:"token string"},"'_'"),c(),l("span",{class:"token operator"},"+"),c(" postfix\n    "),l("span",{class:"token punctuation"},"}"),c("\n  "),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),c("\n\n  "),l("span",{class:"token keyword"},"var"),c(),l("span",{class:"token function-variable function"},"SymbolPolyfill"),c(),l("span",{class:"token operator"},"="),c(),l("span",{class:"token keyword"},"function"),c(),l("span",{class:"token function"},"Symbol"),l("span",{class:"token punctuation"},"("),l("span",{class:"token parameter"},"description"),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token punctuation"},"{"),c("\n\n    "),l("span",{class:"token keyword"},"if"),c(),l("span",{class:"token punctuation"},"("),l("span",{class:"token keyword"},"this"),c(),l("span",{class:"token keyword"},"instanceof"),c(),l("span",{class:"token class-name"},"SymbolPolyfill"),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token keyword"},"throw"),c(),l("span",{class:"token keyword"},"new"),c(),l("span",{class:"token class-name"},"TypeError"),l("span",{class:"token punctuation"},"("),l("span",{class:"token string"},"'Symbol is not a constructor'"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n\n    "),l("span",{class:"token keyword"},"var"),c(" descString "),l("span",{class:"token operator"},"="),c(" description "),l("span",{class:"token operator"},"==="),c(),l("span",{class:"token keyword"},"undefined"),c(),l("span",{class:"token operator"},"?"),c(),l("span",{class:"token keyword"},"undefined"),c(),l("span",{class:"token operator"},":"),c(),l("span",{class:"token function"},"String"),l("span",{class:"token punctuation"},"("),c("description"),l("span",{class:"token punctuation"},")"),c("\n\n    "),l("span",{class:"token keyword"},"var"),c(" symbol "),l("span",{class:"token operator"},"="),c(" Object"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"create"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},"{"),c("\n      "),l("span",{class:"token function-variable function"},"toString"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token keyword"},"function"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token punctuation"},"{"),c("\n        "),l("span",{class:"token keyword"},"return"),c(),l("span",{class:"token keyword"},"this"),l("span",{class:"token punctuation"},"."),c("__Name__"),l("span",{class:"token punctuation"},";"),c("\n      "),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},","),c("\n      "),l("span",{class:"token function-variable function"},"valueOf"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token keyword"},"function"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token punctuation"},"{"),c("\n        "),l("span",{class:"token keyword"},"return"),c(),l("span",{class:"token keyword"},"this"),l("span",{class:"token punctuation"},";"),c("\n      "),l("span",{class:"token punctuation"},"}"),c("\n    "),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},")"),c("\n\n    Object"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"defineProperties"),l("span",{class:"token punctuation"},"("),c("symbol"),l("span",{class:"token punctuation"},","),c(),l("span",{class:"token punctuation"},"{"),c("\n      "),l("span",{class:"token string"},"'__Description__'"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token punctuation"},"{"),c("\n        value"),l("span",{class:"token operator"},":"),c(" descString"),l("span",{class:"token punctuation"},","),c("\n        writable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"false"),l("span",{class:"token punctuation"},","),c("\n        enumerable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"false"),l("span",{class:"token punctuation"},","),c("\n        configurable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"false"),c("\n      "),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},","),c("\n      "),l("span",{class:"token string"},"'__Name__'"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token punctuation"},"{"),c("\n        value"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token function"},"generateName"),l("span",{class:"token punctuation"},"("),c("descString"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},","),c("\n        writable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"false"),l("span",{class:"token punctuation"},","),c("\n        enumerable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"false"),l("span",{class:"token punctuation"},","),c("\n        configurable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"false"),c("\n      "),l("span",{class:"token punctuation"},"}"),c("\n    "),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n\n    "),l("span",{class:"token keyword"},"return"),c(" symbol"),l("span",{class:"token punctuation"},";"),c("\n  "),l("span",{class:"token punctuation"},"}"),c("\n\n  "),l("span",{class:"token keyword"},"var"),c(" forMap "),l("span",{class:"token operator"},"="),c(),l("span",{class:"token punctuation"},"{"),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},";"),c("\n\n  Object"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"defineProperties"),l("span",{class:"token punctuation"},"("),c("SymbolPolyfill"),l("span",{class:"token punctuation"},","),c(),l("span",{class:"token punctuation"},"{"),c("\n    "),l("span",{class:"token string"},"'for'"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token punctuation"},"{"),c("\n      "),l("span",{class:"token function-variable function"},"value"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token keyword"},"function"),l("span",{class:"token punctuation"},"("),l("span",{class:"token parameter"},"description"),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token punctuation"},"{"),c("\n        "),l("span",{class:"token keyword"},"var"),c(" descString "),l("span",{class:"token operator"},"="),c(" description "),l("span",{class:"token operator"},"==="),c(),l("span",{class:"token keyword"},"undefined"),c(),l("span",{class:"token operator"},"?"),c(),l("span",{class:"token keyword"},"undefined"),c(),l("span",{class:"token operator"},":"),c(),l("span",{class:"token function"},"String"),l("span",{class:"token punctuation"},"("),c("description"),l("span",{class:"token punctuation"},")"),c("\n        "),l("span",{class:"token keyword"},"return"),c(" forMap"),l("span",{class:"token punctuation"},"["),c("descString"),l("span",{class:"token punctuation"},"]"),c(),l("span",{class:"token operator"},"?"),c(" forMap"),l("span",{class:"token punctuation"},"["),c("descString"),l("span",{class:"token punctuation"},"]"),c(),l("span",{class:"token operator"},":"),c(" forMap"),l("span",{class:"token punctuation"},"["),c("descString"),l("span",{class:"token punctuation"},"]"),c(),l("span",{class:"token operator"},"="),c(),l("span",{class:"token function"},"SymbolPolyfill"),l("span",{class:"token punctuation"},"("),c("descString"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n      "),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},","),c("\n      writable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"true"),l("span",{class:"token punctuation"},","),c("\n      enumerable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"false"),l("span",{class:"token punctuation"},","),c("\n      configurable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"true"),c("\n    "),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},","),c("\n    "),l("span",{class:"token string"},"'keyFor'"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token punctuation"},"{"),c("\n      "),l("span",{class:"token function-variable function"},"value"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token keyword"},"function"),l("span",{class:"token punctuation"},"("),l("span",{class:"token parameter"},"symbol"),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token punctuation"},"{"),c("\n        "),l("span",{class:"token keyword"},"for"),c(),l("span",{class:"token punctuation"},"("),l("span",{class:"token keyword"},"var"),c(" key "),l("span",{class:"token keyword"},"in"),c(" forMap"),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token punctuation"},"{"),c("\n          "),l("span",{class:"token keyword"},"if"),c(),l("span",{class:"token punctuation"},"("),c("forMap"),l("span",{class:"token punctuation"},"["),c("key"),l("span",{class:"token punctuation"},"]"),c(),l("span",{class:"token operator"},"==="),c(" symbol"),l("span",{class:"token punctuation"},")"),c(),l("span",{class:"token keyword"},"return"),c(" key"),l("span",{class:"token punctuation"},";"),c("\n        "),l("span",{class:"token punctuation"},"}"),c("\n      "),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},","),c("\n      writable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"true"),l("span",{class:"token punctuation"},","),c("\n      enumerable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"false"),l("span",{class:"token punctuation"},","),c("\n      configurable"),l("span",{class:"token operator"},":"),c(),l("span",{class:"token boolean"},"true"),c("\n    "),l("span",{class:"token punctuation"},"}"),c("\n  "),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},";"),c("\n\n  root"),l("span",{class:"token punctuation"},"."),c("SymbolPolyfill "),l("span",{class:"token operator"},"="),c(" SymbolPolyfill"),l("span",{class:"token punctuation"},";"),c("\n"),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},")"),l("span",{class:"token punctuation"},"("),l("span",{class:"token punctuation"},")"),c("\n")])]),l("div",{class:"line-numbers-wrapper"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br"),l("span",{class:"line-number"},"6"),l("br"),l("span",{class:"line-number"},"7"),l("br"),l("span",{class:"line-number"},"8"),l("br"),l("span",{class:"line-number"},"9"),l("br"),l("span",{class:"line-number"},"10"),l("br"),l("span",{class:"line-number"},"11"),l("br"),l("span",{class:"line-number"},"12"),l("br"),l("span",{class:"line-number"},"13"),l("br"),l("span",{class:"line-number"},"14"),l("br"),l("span",{class:"line-number"},"15"),l("br"),l("span",{class:"line-number"},"16"),l("br"),l("span",{class:"line-number"},"17"),l("br"),l("span",{class:"line-number"},"18"),l("br"),l("span",{class:"line-number"},"19"),l("br"),l("span",{class:"line-number"},"20"),l("br"),l("span",{class:"line-number"},"21"),l("br"),l("span",{class:"line-number"},"22"),l("br"),l("span",{class:"line-number"},"23"),l("br"),l("span",{class:"line-number"},"24"),l("br"),l("span",{class:"line-number"},"25"),l("br"),l("span",{class:"line-number"},"26"),l("br"),l("span",{class:"line-number"},"27"),l("br"),l("span",{class:"line-number"},"28"),l("br"),l("span",{class:"line-number"},"29"),l("br"),l("span",{class:"line-number"},"30"),l("br"),l("span",{class:"line-number"},"31"),l("br"),l("span",{class:"line-number"},"32"),l("br"),l("span",{class:"line-number"},"33"),l("br"),l("span",{class:"line-number"},"34"),l("br"),l("span",{class:"line-number"},"35"),l("br"),l("span",{class:"line-number"},"36"),l("br"),l("span",{class:"line-number"},"37"),l("br"),l("span",{class:"line-number"},"38"),l("br"),l("span",{class:"line-number"},"39"),l("br"),l("span",{class:"line-number"},"40"),l("br"),l("span",{class:"line-number"},"41"),l("br"),l("span",{class:"line-number"},"42"),l("br"),l("span",{class:"line-number"},"43"),l("br"),l("span",{class:"line-number"},"44"),l("br"),l("span",{class:"line-number"},"45"),l("br"),l("span",{class:"line-number"},"46"),l("br"),l("span",{class:"line-number"},"47"),l("br"),l("span",{class:"line-number"},"48"),l("br"),l("span",{class:"line-number"},"49"),l("br"),l("span",{class:"line-number"},"50"),l("br"),l("span",{class:"line-number"},"51"),l("br"),l("span",{class:"line-number"},"52"),l("br"),l("span",{class:"line-number"},"53"),l("br"),l("span",{class:"line-number"},"54"),l("br"),l("span",{class:"line-number"},"55"),l("br"),l("span",{class:"line-number"},"56"),l("br"),l("span",{class:"line-number"},"57"),l("br"),l("span",{class:"line-number"},"58"),l("br"),l("span",{class:"line-number"},"59"),l("br"),l("span",{class:"line-number"},"60"),l("br"),l("span",{class:"line-number"},"61"),l("br"),l("span",{class:"line-number"},"62"),l("br"),l("span",{class:"line-number"},"63"),l("br"),l("span",{class:"line-number"},"64"),l("br"),l("span",{class:"line-number"},"65"),l("br"),l("span",{class:"line-number"},"66"),l("br"),l("span",{class:"line-number"},"67"),l("br"),l("span",{class:"line-number"},"68"),l("br"),l("span",{class:"line-number"},"69"),l("br"),l("span",{class:"line-number"},"70"),l("br")])],-1);var yn=n(u,[["render",function(n,t,l,c,r,u){const yn=s("code-block");return p(),a("div",null,[i,o(yn,{showAction:!1},{default:e((()=>[k])),_:1}),b,o(yn,{showAction:!1},{default:e((()=>[m])),_:1}),y,o(yn,{showAction:!1},{default:e((()=>[d])),_:1}),f,o(yn,{showAction:!1},{default:e((()=>[S])),_:1}),g,o(yn,{showAction:!1},{default:e((()=>[w])),_:1}),h,o(yn,{showAction:!1},{default:e((()=>[_])),_:1}),v,o(yn,{showAction:!1},{default:e((()=>[j])),_:1}),O,o(yn,{showAction:!1},{default:e((()=>[P])),_:1}),x,o(yn,{showAction:!1},{default:e((()=>[A])),_:1}),T,o(yn,{showAction:!1},{default:e((()=>[N])),_:1}),M,o(yn,{showAction:!1},{default:e((()=>[E])),_:1}),D,o(yn,{showAction:!1},{default:e((()=>[F])),_:1}),C,o(yn,{showAction:!1},{default:e((()=>[q])),_:1}),I,o(yn,{showAction:!1},{default:e((()=>[V])),_:1}),J,H,o(yn,{showAction:!1},{default:e((()=>[R])),_:1}),U,o(yn,{showAction:!1},{default:e((()=>[W])),_:1}),z,B,G,o(yn,{showAction:!1},{default:e((()=>[K])),_:1}),L,o(yn,{showAction:!1},{default:e((()=>[Q])),_:1}),X,Y,Z,$,o(yn,{showAction:!1},{default:e((()=>[nn])),_:1}),sn,o(yn,{showAction:!1},{default:e((()=>[an])),_:1}),on,en,o(yn,{showAction:!1},{default:e((()=>[tn])),_:1}),ln,o(yn,{showAction:!1},{default:e((()=>[cn])),_:1}),pn,rn,un,kn,bn,o(yn,{showAction:!1},{default:e((()=>[mn])),_:1})])}]]);export{r as __pageData,yn as default};
