import{_ as n,r as s,c as a,a as t,w as e,f as o,e as c,b as l,o as p}from"./app.de0c49ac.js";const u='{"title":"JavaScript 中闭包的详解","description":"","frontmatter":{},"headers":[{"level":2,"title":"闭包是什么","slug":"闭包是什么"},{"level":3,"title":"作用域链","slug":"作用域链"},{"level":3,"title":"内存管理","slug":"内存管理"},{"level":2,"title":"应用场景","slug":"应用场景"},{"level":3,"title":"函数防抖和节流","slug":"函数防抖和节流"},{"level":3,"title":"设计单例模式","slug":"设计单例模式"},{"level":3,"title":"设置私有变量","slug":"设置私有变量"},{"level":3,"title":"为节点循环绑定click事件","slug":"为节点循环绑定click事件"}],"relativePath":"learns/javascript/js-iife.md","lastUpdated":1635308878158}',r={},i=o('<p><div class="table-of-contents"><ul><li><a href="#闭包是什么">闭包是什么</a><ul><li><a href="#作用域链">作用域链</a></li><li><a href="#内存管理">内存管理</a></li></ul></li><li><a href="#应用场景">应用场景</a><ul><li><a href="#函数防抖和节流">函数防抖和节流</a></li><li><a href="#设计单例模式">设计单例模式</a></li><li><a href="#设置私有变量">设置私有变量</a></li><li><a href="#为节点循环绑定click事件">为节点循环绑定click事件</a></li></ul></li></ul></div></p><h1 id="javascript-中闭包的详解" tabindex="-1">JavaScript 中闭包的详解 <a class="header-anchor" href="#javascript-中闭包的详解" aria-hidden="true">#</a></h1><h2 id="闭包是什么" tabindex="-1">闭包是什么 <a class="header-anchor" href="#闭包是什么" aria-hidden="true">#</a></h2><p>闭包是指那些能够访问自由变量的函数。</p><p>《JavaScript高级程序设计第三版》：闭包是指有权访问另一个函数作用域中的变量的函数，创建闭包的常见方式，就是在一个函数内部创建另一个函数。</p><p>《你不知道的JavaScript（上卷）》：当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。</p>',6),k=c("div",{class:"language-js line-numbers-mode"},[c("pre",null,[c("code",null,[c("span",{class:"token keyword"},"function"),l(),c("span",{class:"token function"},"foo"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n  "),c("span",{class:"token keyword"},"var"),l(" a "),c("span",{class:"token operator"},"="),l(),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},";"),l("\n  "),c("span",{class:"token keyword"},"function"),l(),c("span",{class:"token function"},"bar"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n    console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),l(" a "),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l(),c("span",{class:"token comment"},"// 2"),l("\n  "),c("span",{class:"token punctuation"},"}"),l("\n  "),c("span",{class:"token function"},"bar"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n"),c("span",{class:"token punctuation"},"}"),l("\n"),c("span",{class:"token function"},"foo"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n")])]),c("div",{class:"line-numbers-wrapper"},[c("span",{class:"line-number"},"1"),c("br"),c("span",{class:"line-number"},"2"),c("br"),c("span",{class:"line-number"},"3"),c("br"),c("span",{class:"line-number"},"4"),c("br"),c("span",{class:"line-number"},"5"),c("br"),c("span",{class:"line-number"},"6"),c("br"),c("span",{class:"line-number"},"7"),c("br"),c("span",{class:"line-number"},"8"),c("br")])],-1),b=c("p",null,"按照第一种定义，这个就是闭包了，因为在一个函数foo内部创建另一个函数bar()。其实，我们仔细看下定义就会发现：在一个函数内部创建另一个函数是创建闭包的常见方式，并不是闭包的定义。确切的说，上述代码中bar() 对a 的引用的方法是词法作用域的查找规则，而这些规则只是闭包的一部分。",-1),m=c("div",{class:"language-js line-numbers-mode"},[c("pre",null,[c("code",null,[c("span",{class:"token keyword"},"var"),l(" a "),c("span",{class:"token operator"},"="),l(),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},";"),l("\n"),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"function"),l(),c("span",{class:"token constant"},"IIFE"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n  console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),l(" a "),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),c("span",{class:"token comment"},"//2"),l("\n"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n")])]),c("div",{class:"line-numbers-wrapper"},[c("span",{class:"line-number"},"1"),c("br"),c("span",{class:"line-number"},"2"),c("br"),c("span",{class:"line-number"},"3"),c("br"),c("span",{class:"line-number"},"4"),c("br")])],-1),d=c("p",null,"这个是闭包吗？按照前面的定义，并不是，因为IIFE这个函数并不是在它本身的词法作用域以外执行的，a 是通过普通的词法作用域查找而非闭包被发现的。",-1),f=c("div",{class:"language-js line-numbers-mode"},[c("pre",null,[c("code",null,[c("span",{class:"token keyword"},"function"),l(),c("span",{class:"token function"},"foo"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n  "),c("span",{class:"token keyword"},"var"),l(" a "),c("span",{class:"token operator"},"="),l(),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},";"),l("\n  "),c("span",{class:"token keyword"},"function"),l(),c("span",{class:"token function"},"bar"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n    console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),l(" a "),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n  "),c("span",{class:"token punctuation"},"}"),l("\n  "),c("span",{class:"token keyword"},"return"),l(" bar"),c("span",{class:"token punctuation"},";"),l("\n"),c("span",{class:"token punctuation"},"}"),l("\n"),c("span",{class:"token keyword"},"var"),l(" baz "),c("span",{class:"token operator"},"="),l(),c("span",{class:"token function"},"foo"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n"),c("span",{class:"token function"},"baz"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l(),c("span",{class:"token comment"},"// 2 "),l("\n")])]),c("div",{class:"line-numbers-wrapper"},[c("span",{class:"line-number"},"1"),c("br"),c("span",{class:"line-number"},"2"),c("br"),c("span",{class:"line-number"},"3"),c("br"),c("span",{class:"line-number"},"4"),c("br"),c("span",{class:"line-number"},"5"),c("br"),c("span",{class:"line-number"},"6"),c("br"),c("span",{class:"line-number"},"7"),c("br"),c("span",{class:"line-number"},"8"),c("br"),c("span",{class:"line-number"},"9"),c("br")])],-1),w=c("p",null,"在上面例子中，bar()在自己定义的词法作用域以外的地方被执行，这就是闭包。",-1),g=c("p",null,"一般情况下，由于有垃圾回收机制，在foo() 执行后，foo() 的整个内部作用域都被销毁。而闭包的“神奇”之处在于可以阻止这件事情的发生。事实上，bar()在使用foo() 的内部作用域，所以这个内部作用域依然存在，拜bar() 所声明的位置所赐，它拥有涵盖foo() 内部作用域的闭包，使得该作用域能够一直存活，使得bar() 在之后任何时间进行引用。bar() 对foo()的作用域的引用，就叫作闭包。",-1),y=c("div",{class:"language-js line-numbers-mode"},[c("pre",null,[c("code",null,[c("span",{class:"token keyword"},"function"),l(),c("span",{class:"token function"},"foo"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n  "),c("span",{class:"token keyword"},"var"),l(" a "),c("span",{class:"token operator"},"="),l(),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},";"),l("\n  "),c("span",{class:"token keyword"},"function"),l(),c("span",{class:"token function"},"baz"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n    console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),l(" a "),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l(),c("span",{class:"token comment"},"// 2"),l("\n  "),c("span",{class:"token punctuation"},"}"),l("\n  "),c("span",{class:"token function"},"bar"),c("span",{class:"token punctuation"},"("),l(" baz "),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n"),c("span",{class:"token punctuation"},"}"),l("\n"),c("span",{class:"token keyword"},"function"),l(),c("span",{class:"token function"},"bar"),c("span",{class:"token punctuation"},"("),c("span",{class:"token parameter"},"fn"),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n  "),c("span",{class:"token function"},"fn"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l(" \n"),c("span",{class:"token punctuation"},"}"),l("\n\n"),c("span",{class:"token keyword"},"var"),l(" fn"),c("span",{class:"token punctuation"},";"),l("\n"),c("span",{class:"token keyword"},"function"),l(),c("span",{class:"token function"},"foo"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n  "),c("span",{class:"token keyword"},"var"),l(" a "),c("span",{class:"token operator"},"="),l(),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},";"),l("\n  "),c("span",{class:"token keyword"},"function"),l(),c("span",{class:"token function"},"baz"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n    console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),l(" a "),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n  "),c("span",{class:"token punctuation"},"}"),l("\n  fn "),c("span",{class:"token operator"},"="),l(" baz"),c("span",{class:"token punctuation"},";"),l(),c("span",{class:"token comment"},"// 将baz 分配给全局变量"),l("\n"),c("span",{class:"token punctuation"},"}"),l("\n"),c("span",{class:"token keyword"},"function"),l(),c("span",{class:"token function"},"bar"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n  "),c("span",{class:"token function"},"fn"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l(),c("span",{class:"token comment"},"// 这就是闭包！"),l("\n"),c("span",{class:"token punctuation"},"}"),l("\n"),c("span",{class:"token function"},"foo"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n"),c("span",{class:"token function"},"bar"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l(),c("span",{class:"token comment"},"// 2"),l("\n")])]),c("div",{class:"line-numbers-wrapper"},[c("span",{class:"line-number"},"1"),c("br"),c("span",{class:"line-number"},"2"),c("br"),c("span",{class:"line-number"},"3"),c("br"),c("span",{class:"line-number"},"4"),c("br"),c("span",{class:"line-number"},"5"),c("br"),c("span",{class:"line-number"},"6"),c("br"),c("span",{class:"line-number"},"7"),c("br"),c("span",{class:"line-number"},"8"),c("br"),c("span",{class:"line-number"},"9"),c("br"),c("span",{class:"line-number"},"10"),c("br"),c("span",{class:"line-number"},"11"),c("br"),c("span",{class:"line-number"},"12"),c("br"),c("span",{class:"line-number"},"13"),c("br"),c("span",{class:"line-number"},"14"),c("br"),c("span",{class:"line-number"},"15"),c("br"),c("span",{class:"line-number"},"16"),c("br"),c("span",{class:"line-number"},"17"),c("br"),c("span",{class:"line-number"},"18"),c("br"),c("span",{class:"line-number"},"19"),c("br"),c("span",{class:"line-number"},"20"),c("br"),c("span",{class:"line-number"},"21"),c("br"),c("span",{class:"line-number"},"22"),c("br"),c("span",{class:"line-number"},"23"),c("br"),c("span",{class:"line-number"},"24"),c("br")])],-1),h=c("p",null,"上述两段代码的区别在于，函数值的传递方式不同，但其运行结果一样，而且都产生了闭包。因此，无论通过何种手段将内部函数传递到所在的词法作用域以外，它都会持有对原始定义作用域的引用，无论在何处执行这个函数都会使用闭包。",-1),v=c("p",null,"我们再来分析闭包中经典的for循环问题",-1),_=c("div",{class:"language-js line-numbers-mode"},[c("pre",null,[c("code",null,[c("span",{class:"token keyword"},"for"),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"var"),l(" i"),c("span",{class:"token operator"},"="),c("span",{class:"token number"},"0"),c("span",{class:"token punctuation"},";"),l("i"),c("span",{class:"token operator"},"<"),c("span",{class:"token number"},"5"),c("span",{class:"token punctuation"},";"),l("i"),c("span",{class:"token operator"},"++"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},"{"),l("\n  "),c("span",{class:"token function"},"setTimeout"),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"function"),l(),c("span",{class:"token function"},"timer"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},"{"),l("\n    console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),l(" i "),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n  "),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},","),l("i"),c("span",{class:"token operator"},"*"),c("span",{class:"token number"},"1000"),c("span",{class:"token punctuation"},")"),l("\n"),c("span",{class:"token punctuation"},"}"),l("\n")])]),c("div",{class:"line-numbers-wrapper"},[c("span",{class:"line-number"},"1"),c("br"),c("span",{class:"line-number"},"2"),c("br"),c("span",{class:"line-number"},"3"),c("br"),c("span",{class:"line-number"},"4"),c("br"),c("span",{class:"line-number"},"5"),c("br")])],-1),C=c("p",null,"如果你认为这段代码的运行结果为分五次输出0，1，2，3，4，每次间隔为1秒，那就错了。正确的结果是，五次输出都为5，那么，这个5 是从哪里来的呢？我们发现这个循环的终止条件是i >=5。条件首次成立时i 的值是5。因此，输出显示的是循环结束时i 的最终值。",-1),A=c("h3",{id:"作用域链",tabindex:"-1"},[l("作用域链 "),c("a",{class:"header-anchor",href:"#作用域链","aria-hidden":"true"},"#")],-1),j=c("div",{class:"language-js line-numbers-mode"},[c("pre",null,[c("code",null,[c("span",{class:"token keyword"},"function"),l(),c("span",{class:"token function"},"compare"),c("span",{class:"token punctuation"},"("),c("span",{class:"token parameter"},[l("value1"),c("span",{class:"token punctuation"},","),l(" value2")]),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},"{"),l("\n  "),c("span",{class:"token keyword"},"if"),l(),c("span",{class:"token punctuation"},"("),l("value1 "),c("span",{class:"token operator"},"<"),l(" value2"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},"{"),l("\n    "),c("span",{class:"token keyword"},"return"),l(),c("span",{class:"token operator"},"-"),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},";"),l("\n  "),c("span",{class:"token punctuation"},"}"),l(),c("span",{class:"token keyword"},"else"),l(),c("span",{class:"token keyword"},"if"),l(),c("span",{class:"token punctuation"},"("),l("value1 "),c("span",{class:"token operator"},">"),l(" value2"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},"{"),l("\n    "),c("span",{class:"token keyword"},"return"),l(),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},";"),l("\n  "),c("span",{class:"token punctuation"},"}"),l(),c("span",{class:"token keyword"},"else"),l(),c("span",{class:"token punctuation"},"{"),l("\n    "),c("span",{class:"token keyword"},"return"),l(),c("span",{class:"token number"},"0"),c("span",{class:"token punctuation"},";"),l("\n  "),c("span",{class:"token punctuation"},"}"),l("\n"),c("span",{class:"token punctuation"},"}"),l("\n"),c("span",{class:"token keyword"},"var"),l(" result "),c("span",{class:"token operator"},"="),l(),c("span",{class:"token function"},"compare"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"5"),c("span",{class:"token punctuation"},","),l(),c("span",{class:"token number"},"10"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n")])]),c("div",{class:"line-numbers-wrapper"},[c("span",{class:"line-number"},"1"),c("br"),c("span",{class:"line-number"},"2"),c("br"),c("span",{class:"line-number"},"3"),c("br"),c("span",{class:"line-number"},"4"),c("br"),c("span",{class:"line-number"},"5"),c("br"),c("span",{class:"line-number"},"6"),c("br"),c("span",{class:"line-number"},"7"),c("br"),c("span",{class:"line-number"},"8"),c("br"),c("span",{class:"line-number"},"9"),c("br"),c("span",{class:"line-number"},"10"),c("br")])],-1),I=c("p",null,[l("以上代码先定义了compare()函数，然后又在全局作用域中调用了它。当调用compare()时，会创建一个包含arguments、value1 和value2 的活动对象。全局执行环境的变量对象（包含result和compare）在compare()执行环境的作用域链中则处于第二位。下图展示了包含上述关系的compare()函数执行时的作用域链。 "),c("img",{src:"https://upload-images.jianshu.io/upload_images/4297212-c119522dfe5abe81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/907/format/webp",alt:"img"})],-1),S=c("p",null,"作用域链本质上是一个指向变量对象的指针列表，它只引用但不实际包含变量对象。",-1),T=c("p",null,"无论什么时候在函数中访问一个变量时，就会从作用域链中搜索具有相应名字的变量。一般来讲，当函数执行完毕后，局部活动对象就会被销毁，内存中仅保存全局作用域（全局执行环境的变量对象）。但是，闭包的情况又有所不同。",-1),E=c("div",{class:"language-js line-numbers-mode"},[c("pre",null,[c("code",null,[c("span",{class:"token keyword"},"function"),l(),c("span",{class:"token function"},"createComparisonFunction"),c("span",{class:"token punctuation"},"("),c("span",{class:"token parameter"},"propertyName"),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n  "),c("span",{class:"token keyword"},"return"),l(),c("span",{class:"token keyword"},"function"),c("span",{class:"token punctuation"},"("),c("span",{class:"token parameter"},[l("object1"),c("span",{class:"token punctuation"},","),l(" object2")]),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},"{"),l("\n    "),c("span",{class:"token keyword"},"var"),l(" value1 "),c("span",{class:"token operator"},"="),l(" object1"),c("span",{class:"token punctuation"},"["),l("propertyName"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},";"),l("\n    "),c("span",{class:"token keyword"},"var"),l(" value2 "),c("span",{class:"token operator"},"="),l(" object2"),c("span",{class:"token punctuation"},"["),l("propertyName"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},";"),l("\n    "),c("span",{class:"token keyword"},"if"),l(),c("span",{class:"token punctuation"},"("),l("value1 "),c("span",{class:"token operator"},"<"),l(" value2"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},"{"),l("\n      "),c("span",{class:"token keyword"},"return"),l(),c("span",{class:"token operator"},"-"),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},";"),l("\n    "),c("span",{class:"token punctuation"},"}"),l(),c("span",{class:"token keyword"},"else"),l(),c("span",{class:"token keyword"},"if"),l(),c("span",{class:"token punctuation"},"("),l("value1 "),c("span",{class:"token operator"},">"),l(" value2"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},"{"),l("\n      "),c("span",{class:"token keyword"},"return"),l(),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},";"),l("\n    "),c("span",{class:"token punctuation"},"}"),l(),c("span",{class:"token keyword"},"else"),l(),c("span",{class:"token punctuation"},"{"),l("\n      "),c("span",{class:"token keyword"},"return"),l(),c("span",{class:"token number"},"0"),c("span",{class:"token punctuation"},";"),l("\n    "),c("span",{class:"token punctuation"},"}"),l("\n  "),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},";"),l("\n"),c("span",{class:"token punctuation"},"}"),l("\n")])]),c("div",{class:"line-numbers-wrapper"},[c("span",{class:"line-number"},"1"),c("br"),c("span",{class:"line-number"},"2"),c("br"),c("span",{class:"line-number"},"3"),c("br"),c("span",{class:"line-number"},"4"),c("br"),c("span",{class:"line-number"},"5"),c("br"),c("span",{class:"line-number"},"6"),c("br"),c("span",{class:"line-number"},"7"),c("br"),c("span",{class:"line-number"},"8"),c("br"),c("span",{class:"line-number"},"9"),c("br"),c("span",{class:"line-number"},"10"),c("br"),c("span",{class:"line-number"},"11"),c("br"),c("span",{class:"line-number"},"12"),c("br"),c("span",{class:"line-number"},"13"),c("br")])],-1),x=c("p",null,[l("在另一个函数内部定义的函数会将包含函数（即外部函数）的活动对象添加到它的作用域链中。因此，在createComparisonFunction()函数内部定义的匿名函数的作用域链中，实际上将会包含外部函数createComparisonFunction()的活动对象。这段代码的作用域链如下所示 "),c("img",{src:"https://upload-images.jianshu.io/upload_images/4297212-f5ae2ab0046f6875.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/918/format/webp",alt:"img"})],-1),q=c("p",null,"在匿名函数从createComparisonFunction()中被返回后，它的作用域链被初始化为包含createComparisonFunction()函数的活动对象和全局变量对象。这样，匿名函数就可以访问在createComparisonFunction()中定义的所有变量。更为重要的是，createComparisonFunction()函数在执行完毕后，其活动对象也不会被销毁，因为匿名函数的作用域链仍然在引用这个活动对象。换句话说，当createComparisonFunction()函数返回后，其执行环境的作用域链会被销毁，但它的活动对象仍然会留在内存中；直到匿名函数被销毁后，createComparisonFunction()的活动对象才会被销毁",-1),N=c("div",{class:"language-js line-numbers-mode"},[c("pre",null,[c("code",null,[c("span",{class:"token comment"},"//创建函数"),l("\n"),c("span",{class:"token keyword"},"var"),l(" compareNames "),c("span",{class:"token operator"},"="),l(),c("span",{class:"token function"},"createComparisonFunction"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},'"name"'),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n"),c("span",{class:"token comment"},"//调用函数"),l("\n"),c("span",{class:"token keyword"},"var"),l(" result "),c("span",{class:"token operator"},"="),l(),c("span",{class:"token function"},"compareNames"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},"{"),l(" name"),c("span",{class:"token operator"},":"),l(),c("span",{class:"token string"},'"Nicholas"'),l(),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},","),l(),c("span",{class:"token punctuation"},"{"),l(" name"),c("span",{class:"token operator"},":"),l(),c("span",{class:"token string"},'"Greg"'),l(),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n"),c("span",{class:"token comment"},"//解除对匿名函数的引用（以便释放内存）"),l("\ncompareNames "),c("span",{class:"token operator"},"="),l(),c("span",{class:"token keyword"},"null"),c("span",{class:"token punctuation"},";"),l("\n")])]),c("div",{class:"line-numbers-wrapper"},[c("span",{class:"line-number"},"1"),c("br"),c("span",{class:"line-number"},"2"),c("br"),c("span",{class:"line-number"},"3"),c("br"),c("span",{class:"line-number"},"4"),c("br"),c("span",{class:"line-number"},"5"),c("br"),c("span",{class:"line-number"},"6"),c("br")])],-1),B=c("p",null,"首先，创建的比较函数被保存在变量compareNames 中。而通过将compareNames 设置为等于null解除该函数的引用，就等于通知垃圾回收例程将其清除。随着匿名函数的作用域链被销毁，其他作用域（除了全局作用域）也都可以安全地销毁了。",-1),F=c("h3",{id:"内存管理",tabindex:"-1"},[l("内存管理 "),c("a",{class:"header-anchor",href:"#内存管理","aria-hidden":"true"},"#")],-1),M=c("p",null,"在闭包中调用局部变量，会导致这个局部变量无法及时被销毁，相当于全局变量一样会一直占用着内存。如果需要回收这些变量占用的内存，可以手动将变量设置为null。",-1),P=c("p",null,"然而在使用闭包的过程中，比较容易形成 JavaScript 对象和 DOM 对象的循环引用，就有可能造成内存泄露。这是因为浏览器的垃圾回收机制中，如果两个对象之间形成了循环引用，那么它们都无法被回收。",-1),z=c("div",{class:"language-js line-numbers-mode"},[c("pre",null,[c("code",null,[c("span",{class:"token keyword"},"function"),l(),c("span",{class:"token function"},"func"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n  "),c("span",{class:"token keyword"},"var"),l(" test "),c("span",{class:"token operator"},"="),l(" document"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"getElementById"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},"'test'"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n  test"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function-variable function"},"onclick"),l(),c("span",{class:"token operator"},"="),l(),c("span",{class:"token keyword"},"function"),l(),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n    console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},"'hello world'"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n  "),c("span",{class:"token punctuation"},"}"),l("\n"),c("span",{class:"token punctuation"},"}"),l("\n")])]),c("div",{class:"line-numbers-wrapper"},[c("span",{class:"line-number"},"1"),c("br"),c("span",{class:"line-number"},"2"),c("br"),c("span",{class:"line-number"},"3"),c("br"),c("span",{class:"line-number"},"4"),c("br"),c("span",{class:"line-number"},"5"),c("br"),c("span",{class:"line-number"},"6"),c("br")])],-1),J=c("p",null,[l("在上面例子中，func 函数中用匿名函数创建了一个闭包。变量 test 是 JavaScript 对象，引用了 id 为 test 的 DOM 对象，DOM 对象的 onclick 属性又引用了闭包，而闭包又可以调用 test("),c("code",null,"test.onclick函数中的this就是对象test"),l(") ，因而形成了循环引用，导致两个对象都无法被回收。要解决这个问题，只需要把循环引用中的变量设为 null 即可。")],-1),V=c("div",{class:"language-js line-numbers-mode"},[c("pre",null,[c("code",null,[c("span",{class:"token keyword"},"function"),l(),c("span",{class:"token function"},"func"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n  "),c("span",{class:"token keyword"},"var"),l(" test "),c("span",{class:"token operator"},"="),l(" document"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"getElementById"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},"'test'"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n  test"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function-variable function"},"onclick"),l(),c("span",{class:"token operator"},"="),l(),c("span",{class:"token keyword"},"function"),l(),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n    console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},"'hello world'"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n  "),c("span",{class:"token punctuation"},"}"),l("\n  test "),c("span",{class:"token operator"},"="),l(),c("span",{class:"token keyword"},"null"),c("span",{class:"token punctuation"},";"),l("\n"),c("span",{class:"token punctuation"},"}"),l("\n")])]),c("div",{class:"line-numbers-wrapper"},[c("span",{class:"line-number"},"1"),c("br"),c("span",{class:"line-number"},"2"),c("br"),c("span",{class:"line-number"},"3"),c("br"),c("span",{class:"line-number"},"4"),c("br"),c("span",{class:"line-number"},"5"),c("br"),c("span",{class:"line-number"},"6"),c("br"),c("span",{class:"line-number"},"7"),c("br")])],-1),D=c("p",null,"如果在 func 函数中不使用匿名函数创建闭包，而是通过引用一个外部函数，也不会出现循环引用的问题。",-1),H=c("div",{class:"language-js line-numbers-mode"},[c("pre",null,[c("code",null,[c("span",{class:"token keyword"},"function"),l(),c("span",{class:"token function"},"func"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n  "),c("span",{class:"token keyword"},"var"),l(" test "),c("span",{class:"token operator"},"="),l(" document"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"getElementById"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},"'test'"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n  test"),c("span",{class:"token punctuation"},"."),l("onclick "),c("span",{class:"token operator"},"="),l(" funcTest"),c("span",{class:"token punctuation"},";"),l("\n"),c("span",{class:"token punctuation"},"}"),l("\n"),c("span",{class:"token keyword"},"function"),l(),c("span",{class:"token function"},"funcTest"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},"{"),l("\n  console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},"'hello world'"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n"),c("span",{class:"token punctuation"},"}"),l("\n")])]),c("div",{class:"line-numbers-wrapper"},[c("span",{class:"line-number"},"1"),c("br"),c("span",{class:"line-number"},"2"),c("br"),c("span",{class:"line-number"},"3"),c("br"),c("span",{class:"line-number"},"4"),c("br"),c("span",{class:"line-number"},"5"),c("br"),c("span",{class:"line-number"},"6"),c("br"),c("span",{class:"line-number"},"7"),c("br")])],-1),L=o('<h2 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-hidden="true">#</a></h2><h3 id="函数防抖和节流" tabindex="-1">函数防抖和节流 <a class="header-anchor" href="#函数防抖和节流" aria-hidden="true">#</a></h3><p>防抖和节流的作用都是防止函数多次调用。区别在于，假设一个用户一直触发这个函数，且每次触发函数的间隔小于wait，防抖的情况下只会调用一次，而节流的 情况会每隔一定时间（参数wait）调用函数。</p><h3 id="设计单例模式" tabindex="-1">设计单例模式 <a class="header-anchor" href="#设计单例模式" aria-hidden="true">#</a></h3><ul><li>组件化思想，使用简单，扩展简单</li><li>避免全局污染</li></ul>',5),O=c("div",{class:"language-js line-numbers-mode"},[c("pre",null,[c("code",null,[c("span",{class:"token keyword"},"class"),l(),c("span",{class:"token class-name"},"CreateUser"),l(),c("span",{class:"token punctuation"},"{"),l("\n  "),c("span",{class:"token function"},"constructor"),c("span",{class:"token punctuation"},"("),c("span",{class:"token parameter"},"name"),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n    "),c("span",{class:"token keyword"},"this"),c("span",{class:"token punctuation"},"."),l("name "),c("span",{class:"token operator"},"="),l(" name"),c("span",{class:"token punctuation"},";"),l("\n    "),c("span",{class:"token keyword"},"this"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"getName"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n  "),c("span",{class:"token punctuation"},"}"),l("\n  "),c("span",{class:"token function"},"getName"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n    "),c("span",{class:"token keyword"},"return"),l(),c("span",{class:"token keyword"},"this"),c("span",{class:"token punctuation"},"."),l("name"),c("span",{class:"token punctuation"},";"),l("\n  "),c("span",{class:"token punctuation"},"}"),l("\n"),c("span",{class:"token punctuation"},"}"),l("\n"),c("span",{class:"token comment"},"// 代理实现单例模式"),l("\n"),c("span",{class:"token keyword"},"var"),l(" ProxyMode "),c("span",{class:"token operator"},"="),l(),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"function"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n  "),c("span",{class:"token keyword"},"var"),l(" instance "),c("span",{class:"token operator"},"="),l(),c("span",{class:"token keyword"},"null"),c("span",{class:"token punctuation"},";"),l("\n  "),c("span",{class:"token keyword"},"return"),l(),c("span",{class:"token keyword"},"function"),c("span",{class:"token punctuation"},"("),c("span",{class:"token parameter"},"name"),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n    "),c("span",{class:"token keyword"},"if"),c("span",{class:"token punctuation"},"("),c("span",{class:"token operator"},"!"),l("instance"),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n      instance "),c("span",{class:"token operator"},"="),l(),c("span",{class:"token keyword"},"new"),l(),c("span",{class:"token class-name"},"CreateUser"),c("span",{class:"token punctuation"},"("),l("name"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n    "),c("span",{class:"token punctuation"},"}"),l("\n    "),c("span",{class:"token keyword"},"return"),l(" instance"),c("span",{class:"token punctuation"},";"),l("\n  "),c("span",{class:"token punctuation"},"}"),l("\n"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n"),c("span",{class:"token comment"},"// 测试单体模式的实例"),l("\n"),c("span",{class:"token keyword"},"var"),l(" a "),c("span",{class:"token operator"},"="),l(),c("span",{class:"token function"},"ProxyMode"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},'"aaa"'),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n"),c("span",{class:"token keyword"},"var"),l(" b "),c("span",{class:"token operator"},"="),l(),c("span",{class:"token function"},"ProxyMode"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},'"bbb"'),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n"),c("span",{class:"token comment"},"// 因为单体模式是只实例化一次，所以下面的实例是相等的"),l("\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),l("a "),c("span",{class:"token operator"},"==="),l(" b"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("    "),c("span",{class:"token comment"},"//true"),l("\n")])]),c("div",{class:"line-numbers-wrapper"},[c("span",{class:"line-number"},"1"),c("br"),c("span",{class:"line-number"},"2"),c("br"),c("span",{class:"line-number"},"3"),c("br"),c("span",{class:"line-number"},"4"),c("br"),c("span",{class:"line-number"},"5"),c("br"),c("span",{class:"line-number"},"6"),c("br"),c("span",{class:"line-number"},"7"),c("br"),c("span",{class:"line-number"},"8"),c("br"),c("span",{class:"line-number"},"9"),c("br"),c("span",{class:"line-number"},"10"),c("br"),c("span",{class:"line-number"},"11"),c("br"),c("span",{class:"line-number"},"12"),c("br"),c("span",{class:"line-number"},"13"),c("br"),c("span",{class:"line-number"},"14"),c("br"),c("span",{class:"line-number"},"15"),c("br"),c("span",{class:"line-number"},"16"),c("br"),c("span",{class:"line-number"},"17"),c("br"),c("span",{class:"line-number"},"18"),c("br"),c("span",{class:"line-number"},"19"),c("br"),c("span",{class:"line-number"},"20"),c("br"),c("span",{class:"line-number"},"21"),c("br"),c("span",{class:"line-number"},"22"),c("br"),c("span",{class:"line-number"},"23"),c("br"),c("span",{class:"line-number"},"24"),c("br")])],-1),U=c("h3",{id:"设置私有变量",tabindex:"-1"},[l("设置私有变量 "),c("a",{class:"header-anchor",href:"#设置私有变量","aria-hidden":"true"},"#")],-1),R=c("div",{class:"language-js line-numbers-mode"},[c("pre",null,[c("code",null,[c("span",{class:"token comment"},"//赋值到闭包里"),l("\n"),c("span",{class:"token keyword"},"const"),l(" Squery "),c("span",{class:"token operator"},"="),l(),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"function"),l(),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n  "),c("span",{class:"token keyword"},"const"),l(" _width "),c("span",{class:"token operator"},"="),l(),c("span",{class:"token function"},"Symbol"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n\n  "),c("span",{class:"token keyword"},"class"),l(),c("span",{class:"token class-name"},"Squery"),l(),c("span",{class:"token punctuation"},"{"),l("\n    "),c("span",{class:"token function"},"constructor"),c("span",{class:"token punctuation"},"("),c("span",{class:"token parameter"},"s"),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n      "),c("span",{class:"token keyword"},"this"),c("span",{class:"token punctuation"},"["),l("_width"),c("span",{class:"token punctuation"},"]"),l(),c("span",{class:"token operator"},"="),l(" s\n    "),c("span",{class:"token punctuation"},"}"),l("\n\n    "),c("span",{class:"token function"},"foo"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),l(),c("span",{class:"token punctuation"},"{"),l("\n      console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"this"),c("span",{class:"token punctuation"},"["),l("_width"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},")"),l("\n    "),c("span",{class:"token punctuation"},"}"),l("\n  "),c("span",{class:"token punctuation"},"}"),l("\n  "),c("span",{class:"token keyword"},"return"),l(" Squery\n"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\n\n"),c("span",{class:"token keyword"},"const"),l(" ss "),c("span",{class:"token operator"},"="),l(),c("span",{class:"token keyword"},"new"),l(),c("span",{class:"token class-name"},"Squery"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"20"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\nss"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"foo"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),l("\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),l("ss"),c("span",{class:"token punctuation"},"["),l("_width"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},")"),l("\n")])]),c("div",{class:"line-numbers-wrapper"},[c("span",{class:"line-number"},"1"),c("br"),c("span",{class:"line-number"},"2"),c("br"),c("span",{class:"line-number"},"3"),c("br"),c("span",{class:"line-number"},"4"),c("br"),c("span",{class:"line-number"},"5"),c("br"),c("span",{class:"line-number"},"6"),c("br"),c("span",{class:"line-number"},"7"),c("br"),c("span",{class:"line-number"},"8"),c("br"),c("span",{class:"line-number"},"9"),c("br"),c("span",{class:"line-number"},"10"),c("br"),c("span",{class:"line-number"},"11"),c("br"),c("span",{class:"line-number"},"12"),c("br"),c("span",{class:"line-number"},"13"),c("br"),c("span",{class:"line-number"},"14"),c("br"),c("span",{class:"line-number"},"15"),c("br"),c("span",{class:"line-number"},"16"),c("br"),c("span",{class:"line-number"},"17"),c("br"),c("span",{class:"line-number"},"18"),c("br"),c("span",{class:"line-number"},"19"),c("br")])],-1),G=c("h3",{id:"为节点循环绑定click事件",tabindex:"-1"},[l("为节点循环绑定click事件 "),c("a",{class:"header-anchor",href:"#为节点循环绑定click事件","aria-hidden":"true"},"#")],-1),K=c("div",{class:"language-html line-numbers-mode"},[c("pre",null,[c("code",null,[c("span",{class:"token tag"},[c("span",{class:"token tag"},[c("span",{class:"token punctuation"},"<"),l("p")]),l(),c("span",{class:"token attr-name"},"id"),c("span",{class:"token attr-value"},[c("span",{class:"token punctuation attr-equals"},"="),c("span",{class:"token punctuation"},'"'),l("info"),c("span",{class:"token punctuation"},'"')]),c("span",{class:"token punctuation"},">")]),l("123"),c("span",{class:"token tag"},[c("span",{class:"token tag"},[c("span",{class:"token punctuation"},"</"),l("p")]),c("span",{class:"token punctuation"},">")]),l("\n"),c("span",{class:"token tag"},[c("span",{class:"token tag"},[c("span",{class:"token punctuation"},"<"),l("p")]),c("span",{class:"token punctuation"},">")]),l("E-mail: "),c("span",{class:"token tag"},[c("span",{class:"token tag"},[c("span",{class:"token punctuation"},"<"),l("input")]),l(),c("span",{class:"token attr-name"},"type"),c("span",{class:"token attr-value"},[c("span",{class:"token punctuation attr-equals"},"="),c("span",{class:"token punctuation"},'"'),l("text"),c("span",{class:"token punctuation"},'"')]),l(),c("span",{class:"token attr-name"},"id"),c("span",{class:"token attr-value"},[c("span",{class:"token punctuation attr-equals"},"="),c("span",{class:"token punctuation"},'"'),l("email"),c("span",{class:"token punctuation"},'"')]),l(),c("span",{class:"token attr-name"},"name"),c("span",{class:"token attr-value"},[c("span",{class:"token punctuation attr-equals"},"="),c("span",{class:"token punctuation"},'"'),l("email"),c("span",{class:"token punctuation"},'"')]),c("span",{class:"token punctuation"},">")]),c("span",{class:"token tag"},[c("span",{class:"token tag"},[c("span",{class:"token punctuation"},"</"),l("p")]),c("span",{class:"token punctuation"},">")]),l("\n"),c("span",{class:"token tag"},[c("span",{class:"token tag"},[c("span",{class:"token punctuation"},"<"),l("p")]),c("span",{class:"token punctuation"},">")]),l("Name: "),c("span",{class:"token tag"},[c("span",{class:"token tag"},[c("span",{class:"token punctuation"},"<"),l("input")]),l(),c("span",{class:"token attr-name"},"type"),c("span",{class:"token attr-value"},[c("span",{class:"token punctuation attr-equals"},"="),c("span",{class:"token punctuation"},'"'),l("text"),c("span",{class:"token punctuation"},'"')]),l(),c("span",{class:"token attr-name"},"id"),c("span",{class:"token attr-value"},[c("span",{class:"token punctuation attr-equals"},"="),c("span",{class:"token punctuation"},'"'),l("name"),c("span",{class:"token punctuation"},'"')]),l(),c("span",{class:"token attr-name"},"name"),c("span",{class:"token attr-value"},[c("span",{class:"token punctuation attr-equals"},"="),c("span",{class:"token punctuation"},'"'),l("name"),c("span",{class:"token punctuation"},'"')]),c("span",{class:"token punctuation"},">")]),c("span",{class:"token tag"},[c("span",{class:"token tag"},[c("span",{class:"token punctuation"},"</"),l("p")]),c("span",{class:"token punctuation"},">")]),l("\n"),c("span",{class:"token tag"},[c("span",{class:"token tag"},[c("span",{class:"token punctuation"},"<"),l("p")]),c("span",{class:"token punctuation"},">")]),l("Age: "),c("span",{class:"token tag"},[c("span",{class:"token tag"},[c("span",{class:"token punctuation"},"<"),l("input")]),l(),c("span",{class:"token attr-name"},"type"),c("span",{class:"token attr-value"},[c("span",{class:"token punctuation attr-equals"},"="),c("span",{class:"token punctuation"},'"'),l("text"),c("span",{class:"token punctuation"},'"')]),l(),c("span",{class:"token attr-name"},"id"),c("span",{class:"token attr-value"},[c("span",{class:"token punctuation attr-equals"},"="),c("span",{class:"token punctuation"},'"'),l("age"),c("span",{class:"token punctuation"},'"')]),l(),c("span",{class:"token attr-name"},"name"),c("span",{class:"token attr-value"},[c("span",{class:"token punctuation attr-equals"},"="),c("span",{class:"token punctuation"},'"'),l("age"),c("span",{class:"token punctuation"},'"')]),c("span",{class:"token punctuation"},">")]),c("span",{class:"token tag"},[c("span",{class:"token tag"},[c("span",{class:"token punctuation"},"</"),l("p")]),c("span",{class:"token punctuation"},">")]),l("\n\n"),c("span",{class:"token tag"},[c("span",{class:"token tag"},[c("span",{class:"token punctuation"},"<"),l("script")]),c("span",{class:"token punctuation"},">")]),l("\n  function showContent(content){\n    document.getElementById('info').innerHTML = content;\n  };\n\n  function setContent(){\n    var infoArr = [\n      {'id':'email','content':'your email address'},\n      {'id':'name','content':'your name'},\n      {'id':'age','content':'your age'}\n    ];\n    for (var i = 0; i < infoArr.length; i++) {\n      var item = infoArr[i];\n      //循环中创建了三个闭包，他们使用了相同的词法环境item，item.content是变化的变量\n      //当onfocus执行时，item.content才确定，此时循环已经结束，三个闭包共享的item已经指向数组最后一项。\n      document.getElementById(item.id).onfocus = function(){\n        showContent(item.content)\n      }\n    }\n  }\n  setContent()\n\n  /**\n    * 解决方法1\n    * 通过函数工厂，则函数为每一个回调都创建一个新的词法环境\n    */\n  function showContent(content){\n    document.getElementById('info').innerHTML = content;\n  };\n\n  function callBack(content){\n    return function(){\n      showContent(content)\n    }\n  };\n\n  function setContent(){\n    var infoArr = [\n      {'id':'email','content':'your email address'},\n      {'id':'name','content':'your name'},\n      {'id':'age','content':'your age'}\n    ];\n    for (var i = 0; i < infoArr.length; i++) {\n      var item = infoArr[i];\n      document.getElementById(item.id).onfocus = callBack(item.content)\n    }\n  }\n  setContent()\n\n  /**\n    * 解决方法2\n    * 绑定事件放在立即执行函数中\n    */\n  function showContent(content){\n    document.getElementById('info').innerHTML = content;\n  };\n\n  function setContent(){\n    var infoArr = [\n      {'id':'email','content':'your email address'},\n      {'id':'name','content':'your name'},\n      {'id':'age','content':'your age'}\n    ];\n    for (var i = 0; i < infoArr.length; i++) {\n      (function(){\n        var item = infoArr[i];\n        document.getElementById(item.id).onfocus = function(){\n          showContent(item.content)\n        }\n      })()//放立即执行函数，立即绑定，用每次的值绑定到事件上，而不是循环结束的值\n    }\n  }\n  setContent()\n\n  /**\n    * 解决方案3\n    * 用ES6声明，避免声明提前，作用域只在当前块内\n    */\n  function showContent(content){\n    document.getElementById('info').innerHTML = content;\n  };\n\n  function setContent(){\n    var infoArr = [\n      {'id':'email','content':'your email address'},\n      {'id':'name','content':'your name'},\n      {'id':'age','content':'your age'}\n    ];\n    for (var i = 0; i < infoArr.length; i++) {\n      let item = infoArr[i];      //限制作用域只在当前块内\n      document.getElementById(item.id).onfocus = function(){\n        showContent(item.content)\n      }\n    }\n  }\n  setContent()\n\n")])]),c("div",{class:"line-numbers-wrapper"},[c("span",{class:"line-number"},"1"),c("br"),c("span",{class:"line-number"},"2"),c("br"),c("span",{class:"line-number"},"3"),c("br"),c("span",{class:"line-number"},"4"),c("br"),c("span",{class:"line-number"},"5"),c("br"),c("span",{class:"line-number"},"6"),c("br"),c("span",{class:"line-number"},"7"),c("br"),c("span",{class:"line-number"},"8"),c("br"),c("span",{class:"line-number"},"9"),c("br"),c("span",{class:"line-number"},"10"),c("br"),c("span",{class:"line-number"},"11"),c("br"),c("span",{class:"line-number"},"12"),c("br"),c("span",{class:"line-number"},"13"),c("br"),c("span",{class:"line-number"},"14"),c("br"),c("span",{class:"line-number"},"15"),c("br"),c("span",{class:"line-number"},"16"),c("br"),c("span",{class:"line-number"},"17"),c("br"),c("span",{class:"line-number"},"18"),c("br"),c("span",{class:"line-number"},"19"),c("br"),c("span",{class:"line-number"},"20"),c("br"),c("span",{class:"line-number"},"21"),c("br"),c("span",{class:"line-number"},"22"),c("br"),c("span",{class:"line-number"},"23"),c("br"),c("span",{class:"line-number"},"24"),c("br"),c("span",{class:"line-number"},"25"),c("br"),c("span",{class:"line-number"},"26"),c("br"),c("span",{class:"line-number"},"27"),c("br"),c("span",{class:"line-number"},"28"),c("br"),c("span",{class:"line-number"},"29"),c("br"),c("span",{class:"line-number"},"30"),c("br"),c("span",{class:"line-number"},"31"),c("br"),c("span",{class:"line-number"},"32"),c("br"),c("span",{class:"line-number"},"33"),c("br"),c("span",{class:"line-number"},"34"),c("br"),c("span",{class:"line-number"},"35"),c("br"),c("span",{class:"line-number"},"36"),c("br"),c("span",{class:"line-number"},"37"),c("br"),c("span",{class:"line-number"},"38"),c("br"),c("span",{class:"line-number"},"39"),c("br"),c("span",{class:"line-number"},"40"),c("br"),c("span",{class:"line-number"},"41"),c("br"),c("span",{class:"line-number"},"42"),c("br"),c("span",{class:"line-number"},"43"),c("br"),c("span",{class:"line-number"},"44"),c("br"),c("span",{class:"line-number"},"45"),c("br"),c("span",{class:"line-number"},"46"),c("br"),c("span",{class:"line-number"},"47"),c("br"),c("span",{class:"line-number"},"48"),c("br"),c("span",{class:"line-number"},"49"),c("br"),c("span",{class:"line-number"},"50"),c("br"),c("span",{class:"line-number"},"51"),c("br"),c("span",{class:"line-number"},"52"),c("br"),c("span",{class:"line-number"},"53"),c("br"),c("span",{class:"line-number"},"54"),c("br"),c("span",{class:"line-number"},"55"),c("br"),c("span",{class:"line-number"},"56"),c("br"),c("span",{class:"line-number"},"57"),c("br"),c("span",{class:"line-number"},"58"),c("br"),c("span",{class:"line-number"},"59"),c("br"),c("span",{class:"line-number"},"60"),c("br"),c("span",{class:"line-number"},"61"),c("br"),c("span",{class:"line-number"},"62"),c("br"),c("span",{class:"line-number"},"63"),c("br"),c("span",{class:"line-number"},"64"),c("br"),c("span",{class:"line-number"},"65"),c("br"),c("span",{class:"line-number"},"66"),c("br"),c("span",{class:"line-number"},"67"),c("br"),c("span",{class:"line-number"},"68"),c("br"),c("span",{class:"line-number"},"69"),c("br"),c("span",{class:"line-number"},"70"),c("br"),c("span",{class:"line-number"},"71"),c("br"),c("span",{class:"line-number"},"72"),c("br"),c("span",{class:"line-number"},"73"),c("br"),c("span",{class:"line-number"},"74"),c("br"),c("span",{class:"line-number"},"75"),c("br"),c("span",{class:"line-number"},"76"),c("br"),c("span",{class:"line-number"},"77"),c("br"),c("span",{class:"line-number"},"78"),c("br"),c("span",{class:"line-number"},"79"),c("br"),c("span",{class:"line-number"},"80"),c("br"),c("span",{class:"line-number"},"81"),c("br"),c("span",{class:"line-number"},"82"),c("br"),c("span",{class:"line-number"},"83"),c("br"),c("span",{class:"line-number"},"84"),c("br"),c("span",{class:"line-number"},"85"),c("br"),c("span",{class:"line-number"},"86"),c("br"),c("span",{class:"line-number"},"87"),c("br"),c("span",{class:"line-number"},"88"),c("br"),c("span",{class:"line-number"},"89"),c("br"),c("span",{class:"line-number"},"90"),c("br"),c("span",{class:"line-number"},"91"),c("br"),c("span",{class:"line-number"},"92"),c("br"),c("span",{class:"line-number"},"93"),c("br"),c("span",{class:"line-number"},"94"),c("br"),c("span",{class:"line-number"},"95"),c("br"),c("span",{class:"line-number"},"96"),c("br"),c("span",{class:"line-number"},"97"),c("br"),c("span",{class:"line-number"},"98"),c("br"),c("span",{class:"line-number"},"99"),c("br"),c("span",{class:"line-number"},"100"),c("br"),c("span",{class:"line-number"},"101"),c("br"),c("span",{class:"line-number"},"102"),c("br")])],-1),Q=c("p",null,"参考文献：",-1),W=c("ul",null,[c("li",null,[c("a",{href:"https://www.jianshu.com/p/ef27006f917f",target:"_blank",rel:"noopener noreferrer"},"你不知道的JavaScript之闭包")])],-1);var X=n(r,[["render",function(n,o,c,l,u,r){const X=s("code-block");return p(),a("div",null,[i,t(X,{showAction:!1},{default:e((()=>[k])),_:1}),b,t(X,{showAction:!1},{default:e((()=>[m])),_:1}),d,t(X,{showAction:!1},{default:e((()=>[f])),_:1}),w,g,t(X,{showAction:!1},{default:e((()=>[y])),_:1}),h,v,t(X,{showAction:!1},{default:e((()=>[_])),_:1}),C,A,t(X,{showAction:!1},{default:e((()=>[j])),_:1}),I,S,T,t(X,{showAction:!1},{default:e((()=>[E])),_:1}),x,q,t(X,{showAction:!1},{default:e((()=>[N])),_:1}),B,F,M,P,t(X,{showAction:!1},{default:e((()=>[z])),_:1}),J,t(X,{showAction:!1},{default:e((()=>[V])),_:1}),D,t(X,{showAction:!1},{default:e((()=>[H])),_:1}),L,t(X,{showAction:!1},{default:e((()=>[O])),_:1}),U,t(X,{showAction:!1},{default:e((()=>[R])),_:1}),G,t(X,{showAction:!1},{default:e((()=>[K])),_:1}),Q,W])}]]);export{u as __pageData,X as default};
