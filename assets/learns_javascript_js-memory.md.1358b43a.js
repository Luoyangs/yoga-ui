import{_ as n,r as a,c as s,a as e,w as t,f as l,e as o,b as p,o as c}from"./app.de0c49ac.js";const u='{"title":"JavaScript 内存机制","description":"","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介"},{"level":2,"title":"内存模型","slug":"内存模型"},{"level":3,"title":"基础数据类型与栈内存","slug":"基础数据类型与栈内存"},{"level":3,"title":"引用数据类型与堆内存","slug":"引用数据类型与堆内存"},{"level":2,"title":"内存的生命周期","slug":"内存的生命周期"},{"level":2,"title":"内存回收","slug":"内存回收"},{"level":3,"title":"垃圾回收算法","slug":"垃圾回收算法"},{"level":3,"title":"如何写出对内存管理友好的JS代码？","slug":"如何写出对内存管理友好的js代码？"},{"level":2,"title":"内存泄露","slug":"内存泄露"},{"level":3,"title":"什么是内存泄露","slug":"什么是内存泄露"},{"level":3,"title":"WeakMap","slug":"weakmap"}],"relativePath":"learns/javascript/js-memory.md","lastUpdated":1635307774051}',r={},i=l('<p><div class="table-of-contents"><ul><li><a href="#简介">简介</a></li><li><a href="#内存模型">内存模型</a><ul><li><a href="#基础数据类型与栈内存">基础数据类型与栈内存</a></li><li><a href="#引用数据类型与堆内存">引用数据类型与堆内存</a></li></ul></li><li><a href="#内存的生命周期">内存的生命周期</a></li><li><a href="#内存回收">内存回收</a><ul><li><a href="#垃圾回收算法">垃圾回收算法</a></li><li><a href="#如何写出对内存管理友好的js代码？">如何写出对内存管理友好的JS代码？</a></li></ul></li><li><a href="#内存泄露">内存泄露</a><ul><li><a href="#什么是内存泄露">什么是内存泄露</a></li><li><a href="#weakmap">WeakMap</a></li></ul></li></ul></div></p><h1 id="javascript-内存机制" tabindex="-1">JavaScript 内存机制 <a class="header-anchor" href="#javascript-内存机制" aria-hidden="true">#</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-hidden="true">#</a></h2><p>每种编程语言都有它的内存管理机制，比如简单的C有低级的内存管理基元，像malloc(),free()。同样我们在学习JavaScript的时候，很有必要了解JavaScript的内存管理机制。 JavaScript的内存管理机制是:内存基元在变量（对象，字符串等等）创建时分配，然后在他们不再被使用时“自动”释放。后者被称为垃圾回收。这个“自动”是混淆并给JavaScript（和其他高级语言）开发者一个错觉：他们可以不用考虑内存管理。 对于前端开发来说，内存空间并不是一个经常被提及的概念，很容易被大家忽视。当然也包括我自己。在很长一段时间里认为内存空间的概念在JS的学习中并不是那么重要。可是后我当我回过头来重新整理JS基础时，发现由于对它们的模糊认知，导致了很多东西我都理解得并不明白。比如最基本的引用数据类型和引用传递到底是怎么回事儿？比如浅复制与深复制有什么不同？还有闭包，原型等等。 但其实在使用JavaScript进行开发的过程中，了解JavaScript内存机制有助于开发人员能够清晰的认识到自己写的代码在执行的过程中发生过什么，也能够提高项目的代码质量。</p><h2 id="内存模型" tabindex="-1">内存模型 <a class="header-anchor" href="#内存模型" aria-hidden="true">#</a></h2><p>JS内存空间分为栈(stack)、堆(heap)、池(一般也会归类为栈中)。 其中栈存放变量，堆存放复杂对象，池存放常量。</p><h3 id="基础数据类型与栈内存" tabindex="-1">基础数据类型与栈内存 <a class="header-anchor" href="#基础数据类型与栈内存" aria-hidden="true">#</a></h3><p>JS中的基础数据类型，这些值都有固定的大小，往往都保存在栈内存中（闭包除外），由系统自动分配存储空间。我们可以直接操作保存在栈内存空间的值，因此基础数据类型都是按值访问 数据在栈内存中的存储与使用方式类似于数据结构中的堆栈数据结构，遵循后进先出的原则。 基础数据类型： Number String Null Undefined Boolean</p><p>要简单理解栈内存空间的存储方式，我们可以通过类比乒乓球盒子来分析。处于盒子中最顶层的乒乓球5，它一定是最后被放进去，但可以最先被使用。而我们想要使用底层的乒乓球1，就必须将上面的4个乒乓球取出来，让乒乓球1处于盒子顶层。这就是栈空间先进后出，后进先出的特点。</p><h3 id="引用数据类型与堆内存" tabindex="-1">引用数据类型与堆内存 <a class="header-anchor" href="#引用数据类型与堆内存" aria-hidden="true">#</a></h3><p>与其他语言不同，JS的引用数据类型，比如数组Array，它们值的大小是不固定的。引用数据类型的值是保存在堆内存中的对象。JS不允许直接访问堆内存中的位置，因此我们不能直接操作对象的堆内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。因此，引用类型的值都是按引用访问的。这里的引用，我们可以粗浅地理解为保存在栈内存中的一个地址，该地址与堆内存的实际值相关联。</p><p>堆存取数据的方式，则与书架与书非常相似。 书虽然也有序的存放在书架上，但是我们只要知道书的名字，我们就可以很方便的取出我们想要的书，而不用像从乒乓球盒子里取乒乓一样，非得将上面的所有乒乓球拿出来才能取到中间的某一个乒乓球。好比在JSON格式的数据中，我们存储的key-value是可以无序的，因为顺序的不同并不影响我们的使用，我们只需要关心书的名字。</p><p>为了更好的搞懂栈内存与堆内存，我们可以结合以下例子与图解进行理解。</p>',13),k=o("div",{class:"language-js line-numbers-mode"},[o("pre",null,[o("code",null,[o("span",{class:"token keyword"},"var"),p(" a1 "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token number"},"0"),o("span",{class:"token punctuation"},";"),p(),o("span",{class:"token comment"},"// 栈 "),p("\n"),o("span",{class:"token keyword"},"var"),p(" a2 "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token string"},"'this is string'"),o("span",{class:"token punctuation"},";"),p(),o("span",{class:"token comment"},"// 栈"),p("\n"),o("span",{class:"token keyword"},"var"),p(" a3 "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token keyword"},"null"),o("span",{class:"token punctuation"},";"),p(),o("span",{class:"token comment"},"// 栈 "),p("\n"),o("span",{class:"token keyword"},"var"),p(" b "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token punctuation"},"{"),p(" m"),o("span",{class:"token operator"},":"),p(),o("span",{class:"token number"},"20"),p(),o("span",{class:"token punctuation"},"}"),o("span",{class:"token punctuation"},";"),p(),o("span",{class:"token comment"},"// 变量b存在于栈中，{m: 20} 作为对象存在于堆内存中"),p("\n"),o("span",{class:"token keyword"},"var"),p(" c "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token punctuation"},"["),o("span",{class:"token number"},"1"),o("span",{class:"token punctuation"},","),p(),o("span",{class:"token number"},"2"),o("span",{class:"token punctuation"},","),p(),o("span",{class:"token number"},"3"),o("span",{class:"token punctuation"},"]"),o("span",{class:"token punctuation"},";"),p(),o("span",{class:"token comment"},"// 变量c存在于栈中，[1, 2, 3] 作为对象存在于堆内存中"),p("\n")])]),o("div",{class:"line-numbers-wrapper"},[o("span",{class:"line-number"},"1"),o("br"),o("span",{class:"line-number"},"2"),o("br"),o("span",{class:"line-number"},"3"),o("br"),o("span",{class:"line-number"},"4"),o("br"),o("span",{class:"line-number"},"5"),o("br")])],-1),d=l("<table><thead><tr><th>变量名</th><th>具体值</th></tr></thead><tbody><tr><td>c</td><td>0x0012ff7d</td></tr><tr><td>b</td><td>0x0012ff7c</td></tr><tr><td>a3</td><td>null</td></tr><tr><td>a2</td><td>this is string</td></tr><tr><td>a1</td><td>0</td></tr></tbody></table><p>堆内存空间</p><p>[1,2,3]<br> {m：20}<br> 因此当我们要访问堆内存中的引用数据类型时，实际上我们首先是从栈中获取了该对象的地址引用（或者地址指针），然后再从堆内存中取得我们需要的数据。 理解了JS的内存空间，我们就可以借助内存空间的特性来验证一下引用类型的一些特点了。 在前端面试中我们常常会遇到这样一个类似的题目</p>",3),b=o("div",{class:"language-js line-numbers-mode"},[o("pre",null,[o("code",null,[o("span",{class:"token comment"},"// demo01.js"),p("\n"),o("span",{class:"token keyword"},"var"),p(" a "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token number"},"20"),o("span",{class:"token punctuation"},";"),p("\n"),o("span",{class:"token keyword"},"var"),p(" b "),o("span",{class:"token operator"},"="),p(" a"),o("span",{class:"token punctuation"},";"),p("\nb "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token number"},"30"),o("span",{class:"token punctuation"},";"),p("\n"),o("span",{class:"token comment"},"// 这时a的值是多少？"),p("\n\n"),o("span",{class:"token comment"},"// demo02.js"),p("\n"),o("span",{class:"token keyword"},"var"),p(" m "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token punctuation"},"{"),p(" a"),o("span",{class:"token operator"},":"),p(),o("span",{class:"token number"},"10"),o("span",{class:"token punctuation"},","),p(" b"),o("span",{class:"token operator"},":"),p(),o("span",{class:"token number"},"20"),p(),o("span",{class:"token punctuation"},"}"),o("span",{class:"token punctuation"},";"),p("\n"),o("span",{class:"token keyword"},"var"),p(" n "),o("span",{class:"token operator"},"="),p(" m"),o("span",{class:"token punctuation"},";"),p("\nn"),o("span",{class:"token punctuation"},"."),p("a "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token number"},"15"),o("span",{class:"token punctuation"},";"),p("\n"),o("span",{class:"token comment"},"// 这时m.a的值是多少"),p("\n")])]),o("div",{class:"line-numbers-wrapper"},[o("span",{class:"line-number"},"1"),o("br"),o("span",{class:"line-number"},"2"),o("br"),o("span",{class:"line-number"},"3"),o("br"),o("span",{class:"line-number"},"4"),o("br"),o("span",{class:"line-number"},"5"),o("br"),o("span",{class:"line-number"},"6"),o("br"),o("span",{class:"line-number"},"7"),o("br"),o("span",{class:"line-number"},"8"),o("br"),o("span",{class:"line-number"},"9"),o("br"),o("span",{class:"line-number"},"10"),o("br"),o("span",{class:"line-number"},"11"),o("br")])],-1),m=l("<p>在栈内存中的数据发生复制行为时，系统会自动为新的变量分配一个新值。var b = a执行之后，a与b虽然值都等于20，但是他们其实已经是相互独立互不影响的值了。具体如图。所以我们修改了b的值以后，a的值并不会发生变化。</p><p>复制前</p><table><thead><tr><th>栈内存空间</th><th>值</th></tr></thead><tbody><tr><td>a</td><td>20</td></tr></tbody></table><p>复制后</p><table><thead><tr><th>栈内存空间</th><th>值</th></tr></thead><tbody><tr><td>b</td><td>20</td></tr><tr><td>a</td><td>20</td></tr></tbody></table><p>b值修改后</p><table><thead><tr><th>栈内存空间</th><th>值</th></tr></thead><tbody><tr><td>b</td><td>30</td></tr><tr><td>a</td><td>20</td></tr></tbody></table><p>在demo02中，我们通过var n = m执行一次复制引用类型的操作。引用类型的复制同样也会为新的变量自动分配一个新的值保存在栈内存中，但不同的是，这个新的值，仅仅只是引用类型的一个地址指针。当地址指针相同时，尽管他们相互独立，但是在堆内存中访问到的具体对象实际上是同一个。</p><p>复制前</p>",9),h=o("table",{"a:10,b:20":""},[o("thead",null,[o("tr",null,[o("th",null,"栈内存空间"),o("th",null,"变量名"),o("th",null,"堆内存空间")])]),o("tbody",null,[o("tr",null,[o("td",null,"m"),o("td",null,"0x0012ff7d"),o("td")])])],-1),f=o("p",null,"复制后",-1),v=o("table",null,[o("thead",null,[o("tr",null,[o("th",null,"栈内存空间"),o("th",null,"变量名"),o("th",null,"堆内存空间")])]),o("tbody",null,[o("tr",{"a:10,b:20":""},[o("td",null,"m"),o("td",null,"0x0012ff7d"),o("td")]),o("tr",null,[o("td",null,"n"),o("td",null,"0x0012ff7e"),o("td")])])],-1),_=o("p",null,"修改后",-1),g=o("table",null,[o("thead",null,[o("tr",null,[o("th",null,"栈内存空间"),o("th",null,"变量名"),o("th",null,"堆内存空间")])]),o("tbody",null,[o("tr",{"a:15,b:20":""},[o("td",null,"m"),o("td",null,"0x0012ff7d"),o("td")]),o("tr",null,[o("td",null,"n"),o("td",null,"0x0012ff7e"),o("td")])])],-1),w=o("h2",{id:"内存的生命周期",tabindex:"-1"},[p("内存的生命周期 "),o("a",{class:"header-anchor",href:"#内存的生命周期","aria-hidden":"true"},"#")],-1),y=o("p",null,"JS环境中分配的内存一般有如下生命周期：",-1),S=o("ul",null,[o("li",null,"内存分配：当我们申明变量、函数、对象的时候，系统会自动为他 们分配内存"),o("li",null,"内存使用：即读写内存，也就是使用变量、函数等"),o("li",null,"内存回收：使用完毕，由垃圾回收机制自动回收不再使用的内存")],-1),T=o("p",null,"为了便于理解，我们使用一个简单的例子来解释这个周期。",-1),A=o("div",{class:"language-js line-numbers-mode"},[o("pre",null,[o("code",null,[o("span",{class:"token keyword"},"var"),p(" a "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token number"},"20"),o("span",{class:"token punctuation"},";"),p("  "),o("span",{class:"token comment"},"// 在内存中给数值变量分配空间"),p("\n"),o("span",{class:"token function"},"alert"),o("span",{class:"token punctuation"},"("),p("a "),o("span",{class:"token operator"},"+"),p(),o("span",{class:"token number"},"100"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),p("  "),o("span",{class:"token comment"},"// 使用内存"),p("\n"),o("span",{class:"token keyword"},"var"),p(" a "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token keyword"},"null"),o("span",{class:"token punctuation"},";"),p(),o("span",{class:"token comment"},"// 使用完毕之后，释放内存空间"),p("\n")])]),o("div",{class:"line-numbers-wrapper"},[o("span",{class:"line-number"},"1"),o("br"),o("span",{class:"line-number"},"2"),o("br"),o("span",{class:"line-number"},"3"),o("br")])],-1),J=o("p",null,"第一步和第二步我们都很好理解，JavaScript在定义变量时就完成了内存分配。第三步释放内存空间则是我们需要重点理解的一个点。",-1),j=o("p",null,"现在想想，从内存来看 null 和 undefined 本质的区别是什么？",-1),x=o("p",null,"为什么typeof(null) //object typeof(undefined) //undefined？",-1),C=o("p",null,"ES6语法中的 const 声明一个只读的常量。一旦声明，常量的值就不能改变。但是下面的代码可以改变 const 的值，这是为什么？",-1),V=o("div",{class:"language-js line-numbers-mode"},[o("pre",null,[o("code",null,[o("span",{class:"token keyword"},"const"),p(" foo "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token punctuation"},"{"),o("span",{class:"token punctuation"},"}"),o("span",{class:"token punctuation"},";"),p(" \nfoo"),o("span",{class:"token punctuation"},"."),p("prop "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token number"},"123"),o("span",{class:"token punctuation"},";"),p("\nfoo"),o("span",{class:"token punctuation"},"."),p("prop "),o("span",{class:"token comment"},"// 123"),p("\nfoo "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token punctuation"},"{"),o("span",{class:"token punctuation"},"}"),o("span",{class:"token punctuation"},";"),p(),o("span",{class:"token comment"},'// TypeError: "foo" is read-only'),p("\n")])]),o("div",{class:"line-numbers-wrapper"},[o("span",{class:"line-number"},"1"),o("br"),o("span",{class:"line-number"},"2"),o("br"),o("span",{class:"line-number"},"3"),o("br"),o("span",{class:"line-number"},"4"),o("br")])],-1),I=o("h2",{id:"内存回收",tabindex:"-1"},[p("内存回收 "),o("a",{class:"header-anchor",href:"#内存回收","aria-hidden":"true"},"#")],-1),M=o("p",null,"JavaScript有自动垃圾收集机制，那么这个自动垃圾收集机制的原理是什么呢？其实很简单，就是找出那些不再继续使用的值，然后释放其占用的内存。垃圾收集器会每隔固定的时间段就执行一次释放操作。",-1),P=o("p",null,"在JavaScript中，最常用的是通过标记清除的算法来找到哪些对象是不再继续使用的，因此 a = null 其实仅仅只是做了一个释放引用的操作，让 a 原本对应的值失去引用，脱离执行环境，这个值会在下一次垃圾收集器执行操作时被找到并释放。而在适当的时候解除引用，是为页面获得更好性能的一个重要方式。",-1),E=o("ul",null,[o("li",null,[o("p",null,"在局部作用域中，当函数执行完毕，局部变量也就没有存在的必要了，因此垃圾收集器很容易做出判断并回收。但是全局变量什么时候需要自动释放内存空间则很难判断，因此在我们的开发中，需要尽量避免使用全局变量，以确保性能问题。")]),o("li",null,[o("p",null,"以Google的V8引擎为例，在V8引擎中所有的JAVASCRIPT对象都是通过堆来进行内存分配的。当我们在代码中声明变量并赋值时，V8引擎就会在堆内存中分配一部分给这个变量。如果已申请的内存不足以存储这个变量时，V8引擎就会继续申请内存，直到堆的大小达到了V8引擎的内存上限为止（默认情况下，V8引擎的堆内存的大小上限在64位系统中为1464MB，在32位系统中则为732MB）。")]),o("li",null,[o("p",null,"另外，V8引擎对堆内存中的JAVASCRIPT对象进行分代管理。新生代：新生代即存活周期较短的JAVASCRIPT对象，如临时变量、字符串等；老生代：老生代则为经过多次垃圾回收仍然存活，存活周期较长的对象，如主控制器、服务器对象等。")])],-1),D=o("div",{class:"language-js line-numbers-mode"},[o("pre",null,[o("code",null,[o("span",{class:"token keyword"},"function"),p(),o("span",{class:"token function"},"fun1"),o("span",{class:"token punctuation"},"("),o("span",{class:"token punctuation"},")"),p(),o("span",{class:"token punctuation"},"{"),p("\n  "),o("span",{class:"token keyword"},"var"),p(" obj "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token punctuation"},"{"),p("name"),o("span",{class:"token operator"},":"),p(),o("span",{class:"token string"},"'csa'"),o("span",{class:"token punctuation"},","),p(" age"),o("span",{class:"token operator"},":"),p(),o("span",{class:"token number"},"24"),o("span",{class:"token punctuation"},"}"),o("span",{class:"token punctuation"},";"),p("\n"),o("span",{class:"token punctuation"},"}"),p("\n \n"),o("span",{class:"token keyword"},"function"),p(),o("span",{class:"token function"},"fun2"),o("span",{class:"token punctuation"},"("),o("span",{class:"token punctuation"},")"),p(),o("span",{class:"token punctuation"},"{"),p("\n  "),o("span",{class:"token keyword"},"var"),p(" obj "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token punctuation"},"{"),p("name"),o("span",{class:"token operator"},":"),p(),o("span",{class:"token string"},"'coder'"),o("span",{class:"token punctuation"},","),p(" age"),o("span",{class:"token operator"},":"),p(),o("span",{class:"token number"},"2"),o("span",{class:"token punctuation"},"}"),p("\n  "),o("span",{class:"token keyword"},"return"),p(" obj"),o("span",{class:"token punctuation"},";"),p("\n"),o("span",{class:"token punctuation"},"}"),p("\n \n"),o("span",{class:"token keyword"},"var"),p(" f1 "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token function"},"fun1"),o("span",{class:"token punctuation"},"("),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),p("\n"),o("span",{class:"token keyword"},"var"),p(" f2 "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token function"},"fun2"),o("span",{class:"token punctuation"},"("),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),p("\n")])]),o("div",{class:"line-numbers-wrapper"},[o("span",{class:"line-number"},"1"),o("br"),o("span",{class:"line-number"},"2"),o("br"),o("span",{class:"line-number"},"3"),o("br"),o("span",{class:"line-number"},"4"),o("br"),o("span",{class:"line-number"},"5"),o("br"),o("span",{class:"line-number"},"6"),o("br"),o("span",{class:"line-number"},"7"),o("br"),o("span",{class:"line-number"},"8"),o("br"),o("span",{class:"line-number"},"9"),o("br"),o("span",{class:"line-number"},"10"),o("br"),o("span",{class:"line-number"},"11"),o("br")])],-1),W=o("p",null,"在上述代码中，当执行var f1 = fun1();的时候，执行环境会创建一个{name:'csa', age:24}这个对象，当执行var f2 = fun2();的时候，执行环境会创建一个{name:'coder', age=2}这个对象，然后在下一次垃圾回收来临的时候，会释放{name:'csa', age:24}这个对象的内存，但并不会释放{name:'coder', age:2}这个对象的内存。这就是因为在fun2()函数中将{name:'coder, age:2'}这个对象返回，并且将其引用赋值给了f2变量，又由于f2这个对象属于全局变量，所以在页面没有卸载的情况下，f2所指向的对象{name:'coder', age:2}是不会被回收的。 由于JavaScript语言的特殊性(闭包...)，导致如何判断一个对象是否会被回收的问题上变的异常艰难",-1),N=o("h3",{id:"垃圾回收算法",tabindex:"-1"},[p("垃圾回收算法 "),o("a",{class:"header-anchor",href:"#垃圾回收算法","aria-hidden":"true"},"#")],-1),R=o("p",null,"对垃圾回收算法来说，核心思想就是如何判断内存已经不再使用了。",-1),U=o("h4",{id:"引用计数算法",tabindex:"-1"},[p("引用计数算法 "),o("a",{class:"header-anchor",href:"#引用计数算法","aria-hidden":"true"},"#")],-1),O=o("p",null,"熟悉或者用C语言搞过事的同学的都明白，引用无非就是指向某一物体的指针。对不熟悉这个语言的同学来说，可简单将引用视为一个对象访问另一个对象的路径。（这里的对象是一个宽泛的概念，泛指JS环境中的实体）。",-1),q=o("p",null,"引用计数算法定义“内存不再使用”的标准很简单，就是看一个对象是否有指向它的引用。如果没有其他对象指向它了，说明该对象已经不再需了。",-1),B=o("div",{class:"language-js line-numbers-mode"},[o("pre",null,[o("code",null,[o("span",{class:"token comment"},"// 创建一个对象person，他有两个指向属性age和name的引用"),p("\n"),o("span",{class:"token keyword"},"var"),p(" person "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token punctuation"},"{"),p("\n  age"),o("span",{class:"token operator"},":"),p(),o("span",{class:"token number"},"12"),o("span",{class:"token punctuation"},","),p("\n  name"),o("span",{class:"token operator"},":"),p(),o("span",{class:"token string"},"'aaaa'"),p("\n"),o("span",{class:"token punctuation"},"}"),o("span",{class:"token punctuation"},";"),p("\n\nperson"),o("span",{class:"token punctuation"},"."),p("name "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token keyword"},"null"),o("span",{class:"token punctuation"},";"),p(),o("span",{class:"token comment"},"// 虽然设置为null，但因为person对象还有指向name的引用，因此name不会回收"),p("\n\n"),o("span",{class:"token keyword"},"var"),p(" p "),o("span",{class:"token operator"},"="),p(" person"),o("span",{class:"token punctuation"},";"),p(" \nperson "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token number"},"1"),o("span",{class:"token punctuation"},";"),p("         "),o("span",{class:"token comment"},"//原来的person对象被赋值为1，但因为有新引用p指向原person对象，因此它不会被回收"),p("\n\np "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token keyword"},"null"),o("span",{class:"token punctuation"},";"),p("           "),o("span",{class:"token comment"},"//原person对象已经没有引用，很快会被回收"),p("\n")])]),o("div",{class:"line-numbers-wrapper"},[o("span",{class:"line-number"},"1"),o("br"),o("span",{class:"line-number"},"2"),o("br"),o("span",{class:"line-number"},"3"),o("br"),o("span",{class:"line-number"},"4"),o("br"),o("span",{class:"line-number"},"5"),o("br"),o("span",{class:"line-number"},"6"),o("br"),o("span",{class:"line-number"},"7"),o("br"),o("span",{class:"line-number"},"8"),o("br"),o("span",{class:"line-number"},"9"),o("br"),o("span",{class:"line-number"},"10"),o("br"),o("span",{class:"line-number"},"11"),o("br"),o("span",{class:"line-number"},"12"),o("br")])],-1),L=o("p",null,"由上面可以看出，引用计数算法是个简单有效的算法。但它却存在一个致命的问题：循环引用。如果两个对象相互引用，尽管他们已不再使用，垃圾回收器不会进行回收，导致内存泄露。",-1),G=o("div",{class:"language-js line-numbers-mode"},[o("pre",null,[o("code",null,[o("span",{class:"token keyword"},"function"),p(),o("span",{class:"token function"},"cycle"),o("span",{class:"token punctuation"},"("),o("span",{class:"token punctuation"},")"),p(),o("span",{class:"token punctuation"},"{"),p("\n  "),o("span",{class:"token keyword"},"var"),p(" o1 "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token punctuation"},"{"),o("span",{class:"token punctuation"},"}"),o("span",{class:"token punctuation"},";"),p("\n  "),o("span",{class:"token keyword"},"var"),p(" o2 "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token punctuation"},"{"),o("span",{class:"token punctuation"},"}"),o("span",{class:"token punctuation"},";"),p("\n  o1"),o("span",{class:"token punctuation"},"."),p("a "),o("span",{class:"token operator"},"="),p(" o2"),o("span",{class:"token punctuation"},";"),p("\n  o2"),o("span",{class:"token punctuation"},"."),p("a "),o("span",{class:"token operator"},"="),p(" o1"),o("span",{class:"token punctuation"},";"),p(" \n\n  "),o("span",{class:"token keyword"},"return"),p(),o("span",{class:"token string"},'"Cycle reference!"'),p("\n"),o("span",{class:"token punctuation"},"}"),p("\n\n"),o("span",{class:"token function"},"cycle"),o("span",{class:"token punctuation"},"("),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),p("\n")])]),o("div",{class:"line-numbers-wrapper"},[o("span",{class:"line-number"},"1"),o("br"),o("span",{class:"line-number"},"2"),o("br"),o("span",{class:"line-number"},"3"),o("br"),o("span",{class:"line-number"},"4"),o("br"),o("span",{class:"line-number"},"5"),o("br"),o("span",{class:"line-number"},"6"),o("br"),o("span",{class:"line-number"},"7"),o("br"),o("span",{class:"line-number"},"8"),o("br"),o("span",{class:"line-number"},"9"),o("br"),o("span",{class:"line-number"},"10"),o("br")])],-1),z=o("p",null,"面我们申明了一个cycle方程，其中包含两个相互引用的对象。在调用函数结束后，对象o1和o2实际上已离开函数范围，因此不再需要了。但根据引用计数的原则，他们之间的相互引用依然存在，因此这部分内存不会被回收，内存泄露不可避免了。",-1),F=o("p",null,"正是因为有这个严重的缺点，这个算法在现代浏览器中已经被下面要介绍的标记清除算法所取代了。但绝不可认为该问题已经不再存在了，因为还占有大量市场的IE老祖宗们使用的正是这一算法。在需要照顾兼容性的时候，某些看起来非常普通的写法也可能造成意想不到的问题",-1),H=o("div",{class:"language-js line-numbers-mode"},[o("pre",null,[o("code",null,[o("span",{class:"token keyword"},"var"),p(" div "),o("span",{class:"token operator"},"="),p(" document"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"createElement"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},'"div"'),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),p("\ndiv"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function-variable function"},"onclick"),p(),o("span",{class:"token operator"},"="),p(),o("span",{class:"token keyword"},"function"),o("span",{class:"token punctuation"},"("),o("span",{class:"token punctuation"},")"),p(),o("span",{class:"token punctuation"},"{"),p("\n  console"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"log"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},'"click"'),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),p("\n"),o("span",{class:"token punctuation"},"}"),o("span",{class:"token punctuation"},";"),p("\n")])]),o("div",{class:"line-numbers-wrapper"},[o("span",{class:"line-number"},"1"),o("br"),o("span",{class:"line-number"},"2"),o("br"),o("span",{class:"line-number"},"3"),o("br"),o("span",{class:"line-number"},"4"),o("br")])],-1),K=l('<p>上面这种JS写法再普通不过了，创建一个DOM元素并绑定一个点击事件。那么这里有什么问题呢？请注意，变量div有事件处理函数的引用，同时事件处理函数也有div的引用！（div变量可在函数内被访问）。一个循序引用出现了，按上面所讲的算法，该部分内存无可避免地泄露哦了。</p><p>现在你明白为啥前端程序员都讨厌IE了吧？拥有超多BUG并依然占有大量市场的IE是前端开发一生之敌！亲，没有买卖就没有杀害。</p><h4 id="标记清除算法" tabindex="-1">标记清除算法 <a class="header-anchor" href="#标记清除算法" aria-hidden="true">#</a></h4><p>上面说过，现代的浏览器已经不再使用引用计数算法了。现代浏览器通用的大多是基于标记清除算法的某些改进算法，总体思想都是一致的。</p><p>标记清除算法将“不再使用的对象”定义为“无法达到的对象”。简单来说，就是从根部（在JS中就是全局对象）出发定时扫描内存中的对象。凡是能从根部到达的对象，都是还需要使用的。那些无法由根部出发触及到的对象被标记为不再使用，稍后进行回收。</p><p>从这个概念可以看出，无法触及的对象包含了没有引用的对象这个概念（没有任何引用的对象也是无法触及的对象）。但反之未必成立。</p><p>根据这个概念，上面的例子可以正确被垃圾回收处理了 当div与其时间处理函数不能再从全局对象出发触及的时候，垃圾回收器就会标记并回收这两个对象。</p><h3 id="如何写出对内存管理友好的js代码？" tabindex="-1">如何写出对内存管理友好的JS代码？ <a class="header-anchor" href="#如何写出对内存管理友好的js代码？" aria-hidden="true">#</a></h3><p>如果还需要兼容老旧浏览器，那么就需要注意代码中的循环引用问题。或者直接采用保证兼容性的库来帮助优化代码。</p><p>对现代浏览器来说，唯一要注意的就是明确切断需要回收的对象与根部的联系。有时候这种联系并不明显，且因为标记清除算法的强壮性，这个问题较少出现。最常见的内存泄露一般都与DOM元素绑定有关</p>',10),Q=o("div",{class:"language-js line-numbers-mode"},[o("pre",null,[o("code",null,[p("email"),o("span",{class:"token punctuation"},"."),p("message "),o("span",{class:"token operator"},"="),p(" document"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"createElement"),o("span",{class:"token punctuation"},"("),p("“div”"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),p("\ndisplayList"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"appendChild"),o("span",{class:"token punctuation"},"("),p("email"),o("span",{class:"token punctuation"},"."),p("message"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),p("\n\n"),o("span",{class:"token comment"},"// 稍后从displayList中清除DOM元素"),p("\ndisplayList"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"removeAllChildren"),o("span",{class:"token punctuation"},"("),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),p("\n")])]),o("div",{class:"line-numbers-wrapper"},[o("span",{class:"line-number"},"1"),o("br"),o("span",{class:"line-number"},"2"),o("br"),o("span",{class:"line-number"},"3"),o("br"),o("span",{class:"line-number"},"4"),o("br"),o("span",{class:"line-number"},"5"),o("br")])],-1),X=o("p",null,"div元素已经从DOM树中清除，也就是说从DOM树的根部无法触及该div元素了。但是请注意，div元素同时也绑定了email对象。所以只要email对象还存在，该div元素将一直保存在内存中。",-1),Y=o("p",null,"如果你的引用只包含少量JS交互，那么内存管理不会对你造成太多困扰。一旦你开始构建中大规模的 SPA 或是服务器和桌面端的应用，那么就应当将内存泄露提上日程了。不要满足于写出能运行的程序，也不要认为机器的升级就能解决一切。",-1),Z=o("h2",{id:"内存泄露",tabindex:"-1"},[p("内存泄露 "),o("a",{class:"header-anchor",href:"#内存泄露","aria-hidden":"true"},"#")],-1),$=o("h3",{id:"什么是内存泄露",tabindex:"-1"},[p("什么是内存泄露 "),o("a",{class:"header-anchor",href:"#什么是内存泄露","aria-hidden":"true"},"#")],-1),nn=o("p",null,"对于持续运行的服务进程（daemon），必须及时释放不再用到的内存。否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃。 不再用到的内存，没有及时释放，就叫做内存泄漏（memory leak）。 有些语言（比如 C 语言）必须手动释放内存，程序员负责内存管理。",-1),an=o("div",{class:"language-js line-numbers-mode"},[o("pre",null,[o("code",null,[p("char "),o("span",{class:"token operator"},"*"),p(" buffer"),o("span",{class:"token punctuation"},";"),p("\nbuffer "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token punctuation"},"("),p("char"),o("span",{class:"token operator"},"*"),o("span",{class:"token punctuation"},")"),p(),o("span",{class:"token function"},"malloc"),o("span",{class:"token punctuation"},"("),o("span",{class:"token number"},"42"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),p("\n\n"),o("span",{class:"token comment"},"// Do something with buffer"),p("\n\n"),o("span",{class:"token function"},"free"),o("span",{class:"token punctuation"},"("),p("buffer"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),p("\n")])]),o("div",{class:"line-numbers-wrapper"},[o("span",{class:"line-number"},"1"),o("br"),o("span",{class:"line-number"},"2"),o("br"),o("span",{class:"line-number"},"3"),o("br"),o("span",{class:"line-number"},"4"),o("br"),o("span",{class:"line-number"},"5"),o("br"),o("span",{class:"line-number"},"6"),o("br")])],-1),sn=l("<p>上面是 C 语言代码，malloc方法用来申请内存，使用完毕之后，必须自己用free方法释放内存。 这很麻烦，所以大多数语言提供自动内存管理，减轻程序员的负担，这被称为&quot;垃圾回收机制&quot;（garbage collector</p><p>怎样可以观察到内存泄漏呢？ 经验法则是，如果连续五次垃圾回收之后，内存占用一次比一次大，就有内存泄漏。(咳咳，不装逼了) 这要我们实时查看内存占用</p><p>浏览器方法</p><ul><li>打开开发者工具，选择 Timeline 面板</li><li>在顶部的Capture字段里面勾选 Memory</li><li>点击左上角的录制按钮。</li><li>在页面上进行各种操作，模拟用户的使用情况。</li><li>一段时间后，点击对话框的 stop 按钮，面板上就会显示这段时间的内存占用情况。</li></ul><p>如果内存占用基本平稳，接近水平，就说明不存在内存泄漏。 反之，就是内存泄漏了。</p><p>命令行方法</p><p>命令行可以使用 Node 提供的 process.memoryUsage 方法。</p>",7),en=o("div",{class:"language-js line-numbers-mode"},[o("pre",null,[o("code",null,[p("console"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"log"),o("span",{class:"token punctuation"},"("),p("process"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"memoryUsage"),o("span",{class:"token punctuation"},"("),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),p("\n"),o("span",{class:"token comment"},"// { "),p("\n"),o("span",{class:"token comment"},"//  rss: 27709440,"),p("\n"),o("span",{class:"token comment"},"//  heapTotal: 5685248,"),p("\n"),o("span",{class:"token comment"},"//  heapUsed: 3449392,"),p("\n"),o("span",{class:"token comment"},"//  external: 8772"),p("\n"),o("span",{class:"token comment"},"// }"),p("\n")])]),o("div",{class:"line-numbers-wrapper"},[o("span",{class:"line-number"},"1"),o("br"),o("span",{class:"line-number"},"2"),o("br"),o("span",{class:"line-number"},"3"),o("br"),o("span",{class:"line-number"},"4"),o("br"),o("span",{class:"line-number"},"5"),o("br"),o("span",{class:"line-number"},"6"),o("br"),o("span",{class:"line-number"},"7"),o("br")])],-1),tn=l('<p>process.memoryUsage返回一个对象，包含了 Node 进程的内存占用信息。该对象包含四个字段，单位是字节，含义如下。</p><ul><li>rss（resident set size）：所有内存占用，包括指令区和堆栈。</li><li>heapTotal：&quot;堆&quot;占用的内存，包括用到的和没用到的。</li><li>heapUsed：用到的堆的部分。</li><li>external： V8 引擎内部的 C++ 对象占用的内存。</li></ul><p>判断内存泄漏，以heapUsed字段为准。</p><h3 id="weakmap" tabindex="-1">WeakMap <a class="header-anchor" href="#weakmap" aria-hidden="true">#</a></h3><p>前面说过，及时清除引用非常重要。但是，你不可能记得那么多，有时候一疏忽就忘了，所以才有那么多内存泄漏。</p><p>最好能有一种方法，在新建引用的时候就声明，哪些引用必须手动清除，哪些引用可以忽略不计，当其他引用消失以后，垃圾回收机制就可以释放内存。这样就能大大减轻程序员的负担，你只要清除主要引用就可以了。</p><p>ES6 考虑到了这一点，推出了两种新的数据结构：WeakSet 和 WeakMap。它们对于值的引用都是不计入垃圾回收机制的，所以名字里面才会有一个&quot;Weak&quot;，表示这是弱引用。</p>',7),ln=o("div",{class:"language-JS line-numbers-mode"},[o("pre",null,[o("code",null,[o("span",{class:"token keyword"},"const"),p(" wm "),o("span",{class:"token operator"},"="),p(),o("span",{class:"token keyword"},"new"),p(),o("span",{class:"token class-name"},"WeakMap"),o("span",{class:"token punctuation"},"("),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),p("\n\n"),o("span",{class:"token keyword"},"const"),p(" element "),o("span",{class:"token operator"},"="),p(" document"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"getElementById"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},"'example'"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),p("\n\nwm"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"set"),o("span",{class:"token punctuation"},"("),p("element"),o("span",{class:"token punctuation"},","),p(),o("span",{class:"token string"},"'some information'"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),p("\nwm"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"get"),o("span",{class:"token punctuation"},"("),p("element"),o("span",{class:"token punctuation"},")"),p(),o("span",{class:"token comment"},'// "some information"'),p("\n")])]),o("div",{class:"line-numbers-wrapper"},[o("span",{class:"line-number"},"1"),o("br"),o("span",{class:"line-number"},"2"),o("br"),o("span",{class:"line-number"},"3"),o("br"),o("span",{class:"line-number"},"4"),o("br"),o("span",{class:"line-number"},"5"),o("br"),o("span",{class:"line-number"},"6"),o("br")])],-1),on=o("p",null,"上面代码中，先新建一个 Weakmap 实例。然后，将一个 DOM 节点作为键名存入该实例，并将一些附加信息作为键值，一起存放在 WeakMap 里面。这时，WeakMap 里面对element的引用就是弱引用，不会被计入垃圾回收机制。",-1),pn=o("p",null,"也就是说，DOM 节点对象的引用计数是1，而不是2。这时，一旦消除对该节点的引用，它占用的内存就会被垃圾回收机制释放。Weakmap 保存的这个键值对，也会自动消失。",-1),cn=o("p",null,"基本上，如果你要往对象上添加数据，又不想干扰垃圾回收机制，就可以使用 WeakMap。",-1),un=o("p",null,[o("a",{href:"http://www.ruanyifeng.com/blog/2017/04/memory-leak.html",target:"_blank",rel:"noopener noreferrer"},"原文")],-1);var rn=n(r,[["render",function(n,l,o,p,u,r){const rn=a("code-block");return c(),s("div",null,[i,e(rn,{showAction:!1},{default:t((()=>[k])),_:1}),d,e(rn,{showAction:!1},{default:t((()=>[b])),_:1}),m,h,f,v,_,g,w,y,S,T,e(rn,{showAction:!1},{default:t((()=>[A])),_:1}),J,j,x,C,e(rn,{showAction:!1},{default:t((()=>[V])),_:1}),I,M,P,E,e(rn,{showAction:!1},{default:t((()=>[D])),_:1}),W,N,R,U,O,q,e(rn,{showAction:!1},{default:t((()=>[B])),_:1}),L,e(rn,{showAction:!1},{default:t((()=>[G])),_:1}),z,F,e(rn,{showAction:!1},{default:t((()=>[H])),_:1}),K,e(rn,{showAction:!1},{default:t((()=>[Q])),_:1}),X,Y,Z,$,nn,e(rn,{showAction:!1},{default:t((()=>[an])),_:1}),sn,e(rn,{showAction:!1},{default:t((()=>[en])),_:1}),tn,e(rn,{showAction:!1},{default:t((()=>[ln])),_:1}),on,pn,cn,un])}]]);export{u as __pageData,rn as default};
