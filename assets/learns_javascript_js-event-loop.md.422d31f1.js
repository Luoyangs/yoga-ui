import{_ as n,r as s,c as t,a,w as o,f as e,e as c,b as p,o as u}from"./app.de0c49ac.js";const l='{"title":"JavaScript 运行机制详解：再谈Event Loop","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、为什么JavaScript是单线程？","slug":"一、为什么javascript是单线程？"},{"level":2,"title":"二、任务队列","slug":"二、任务队列"},{"level":2,"title":"三、事件和回调函数","slug":"三、事件和回调函数"},{"level":2,"title":"四、Event Loop","slug":"四、event-loop"},{"level":2,"title":"五、定时器","slug":"五、定时器"},{"level":2,"title":"六、Node.js的Event Loop","slug":"六、node-js的event-loop"}],"relativePath":"learns/javascript/js-event-loop.md","lastUpdated":1635308878158}',i={},r=e('<p><div class="table-of-contents"><ul><li><a href="#一、为什么javascript是单线程？">一、为什么JavaScript是单线程？</a></li><li><a href="#二、任务队列">二、任务队列</a></li><li><a href="#三、事件和回调函数">三、事件和回调函数</a></li><li><a href="#四、event-loop">四、Event Loop</a></li><li><a href="#五、定时器">五、定时器</a></li><li><a href="#六、node-js的event-loop">六、Node.js的Event Loop</a></li></ul></div></p><h1 id="javascript-运行机制详解：再谈event-loop" tabindex="-1">JavaScript 运行机制详解：再谈Event Loop <a class="header-anchor" href="#javascript-运行机制详解：再谈event-loop" aria-hidden="true">#</a></h1><h2 id="一、为什么javascript是单线程？" tabindex="-1">一、为什么JavaScript是单线程？ <a class="header-anchor" href="#一、为什么javascript是单线程？" aria-hidden="true">#</a></h2><p>JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。那么，为什么JavaScript不能有多个线程呢？这样能提高效率啊。</p><p>JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</p><p>所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。</p><p>为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p><h2 id="二、任务队列" tabindex="-1">二、任务队列 <a class="header-anchor" href="#二、任务队列" aria-hidden="true">#</a></h2><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</p><p>如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行。</p><p>JavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。</p><p>于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入&quot;任务队列&quot;（task queue）的任务，只有&quot;任务队列&quot;通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</p><p>具体来说，异步执行的运行机制如下。（同步执行也是如此，因为它可以被视为没有异步任务的异步执行。）</p><ul><li><p>(1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。</p></li><li><p>（2）主线程之外，还存在一个&quot;任务队列&quot;（task queue）。只要异步任务有了运行结果，就在&quot;任务队列&quot;之中放置一个事件。</p></li><li><p>（3）一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</p></li><li><p>（4）主线程不断重复上面的第三步。</p></li></ul><blockquote><p>只要主线程空了，就会去读取&quot;任务队列&quot;，这就是JavaScript的运行机制。这个过程会不断重复。</p></blockquote><h2 id="三、事件和回调函数" tabindex="-1">三、事件和回调函数 <a class="header-anchor" href="#三、事件和回调函数" aria-hidden="true">#</a></h2><p><strong>&quot;任务队列&quot;是一个事件的队列</strong>（也可以理解成消息的队列），IO设备完成一项任务，就在&quot;任务队列&quot;中添加一个事件，表示相关的异步任务可以进入&quot;执行栈&quot;了。主线程读取&quot;任务队列&quot;，就是读取里面有哪些事件。</p><p>&quot;任务队列&quot;中的事件，除了IO设备的事件以外，还包括一些用户产生的事件（比如鼠标点击、页面滚动等等）。只要指定过回调函数，这些事件发生时就会进入&quot;任务队列&quot;，等待主线程读取。</p><p>所谓&quot;回调函数&quot;（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。</p><p>&quot;任务队列&quot;是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，&quot;任务队列&quot;上第一位的事件就自动进入主线程。但是，<strong>由于存在后文提到的&quot;定时器&quot;功能，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。</strong></p><h2 id="四、event-loop" tabindex="-1">四、Event Loop <a class="header-anchor" href="#四、event-loop" aria-hidden="true">#</a></h2><p>主线程从&quot;任务队列&quot;中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）。</p><h2 id="五、定时器" tabindex="-1">五、定时器 <a class="header-anchor" href="#五、定时器" aria-hidden="true">#</a></h2><p>除了放置异步任务的事件，&quot;任务队列&quot;还可以放置定时事件，即指定某些代码在多少时间之后执行。这叫做&quot;定时器&quot;（timer）功能，也就是定时执行的代码。</p><p>定时器功能主要由setTimeout()和setInterval()这两个函数来完成，<strong>它们的内部运行机制完全一样</strong>，区别在于前者指定的代码是一次性执行，后者则为反复执行。以下主要讨论setTimeout()。</p><p>setTimeout()接受两个参数，第一个是回调函数，第二个是推迟执行的毫秒数。</p><blockquote><p>如果将setTimeout()的第二个参数设为0，就表示当前代码执行完（执行栈清空）以后，立即执行（0毫秒间隔）指定的回调函数。</p></blockquote>',27),k=c("div",{class:"language-js line-numbers-mode"},[c("pre",null,[c("code",null,[p("\n"),c("span",{class:"token function"},"setTimeout"),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"function"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},"{"),p("console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"0"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n\n")])]),c("div",{class:"line-numbers-wrapper"},[c("span",{class:"line-number"},"1"),c("br"),c("span",{class:"line-number"},"2"),c("br"),c("span",{class:"line-number"},"3"),c("br"),c("span",{class:"line-number"},"4"),c("br")])],-1),m=e('<p>上面代码的执行结果总是2，1，因为只有在执行完第二行以后，系统才会去执行&quot;任务队列&quot;中的回调函数。</p><p>总之，<strong>setTimeout(fn,0)的含义是，指定某个任务在主线程最早可得的空闲时间执行</strong>，也就是说，尽可能早得执行。它在&quot;任务队列&quot;的尾部添加一个事件，因此要等到同步任务和&quot;任务队列&quot;现有的事件都处理完，才会得到执行。</p><p>HTML5标准规定了setTimeout()的第二个参数的最小值（最短间隔），不得低于4毫秒，如果低于这个值，就会自动增加。在此之前，老版本的浏览器都将最短间隔设为10毫秒。另外，对于那些DOM的变动（尤其是涉及页面重新渲染的部分），通常不会立即执行，而是每16毫秒执行一次。这时使用requestAnimationFrame()的效果要好于setTimeout()。</p><blockquote><p>需要注意的是，setTimeout()只是将事件插入了&quot;任务队列&quot;，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。</p></blockquote><h2 id="六、node-js的event-loop" tabindex="-1">六、Node.js的Event Loop <a class="header-anchor" href="#六、node-js的event-loop" aria-hidden="true">#</a></h2><p>Node.js也是单线程的Event Loop，但是它的运行机制不同于浏览器环境。</p><p>除了setTimeout和setInterval这两个方法，Node.js还提供了另外两个与&quot;任务队列&quot;有关的方法：process.nextTick和setImmediate。它们可以帮助我们加深对&quot;任务队列&quot;的理解。</p><p>process.nextTick方法可以在当前&quot;执行栈&quot;的尾部----下一次Event Loop（主线程读取&quot;任务队列&quot;）之前----触发回调函数。也就是说，它指定的任务总是发生在所有异步任务之前。setImmediate方法则是在当前&quot;任务队列&quot;的尾部添加事件，也就是说，它指定的任务总是在下一次Event Loop时执行，这与setTimeout(fn, 0)很像。请看下面的例子</p>',8),b=c("div",{class:"language-js line-numbers-mode"},[c("pre",null,[c("code",null,[p("process"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"nextTick"),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"function"),p(),c("span",{class:"token constant"},"A"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n  console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n  process"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"nextTick"),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"function"),p(),c("span",{class:"token constant"},"B"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},"{"),p("console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n\n"),c("span",{class:"token function"},"setTimeout"),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"function"),p(),c("span",{class:"token function"},"timeout"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n  console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},"'TIMEOUT FIRED'"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"0"),c("span",{class:"token punctuation"},")"),p("\n"),c("span",{class:"token comment"},"// 1"),p("\n"),c("span",{class:"token comment"},"// 2"),p("\n"),c("span",{class:"token comment"},"// TIMEOUT FIRED"),p("\n")])]),c("div",{class:"line-numbers-wrapper"},[c("span",{class:"line-number"},"1"),c("br"),c("span",{class:"line-number"},"2"),c("br"),c("span",{class:"line-number"},"3"),c("br"),c("span",{class:"line-number"},"4"),c("br"),c("span",{class:"line-number"},"5"),c("br"),c("span",{class:"line-number"},"6"),c("br"),c("span",{class:"line-number"},"7"),c("br"),c("span",{class:"line-number"},"8"),c("br"),c("span",{class:"line-number"},"9"),c("br"),c("span",{class:"line-number"},"10"),c("br"),c("span",{class:"line-number"},"11"),c("br")])],-1),d=c("p",null,[p("上面代码中，"),c("strong",null,'由于process.nextTick方法指定的回调函数，总是在当前"执行栈"的尾部触发'),p('，所以不仅函数A比setTimeout指定的回调函数timeout先执行，而且函数B也比timeout先执行。这说明，如果有多个process.nextTick语句（不管它们是否嵌套），将全部在当前"执行栈"执行')],-1),f=c("p",null,"现在，再看setImmediate。",-1),v=c("div",{class:"language-js line-numbers-mode"},[c("pre",null,[c("code",null,[c("span",{class:"token function"},"setImmediate"),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"function"),p(),c("span",{class:"token constant"},"A"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n  console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n  "),c("span",{class:"token function"},"setImmediate"),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"function"),p(),c("span",{class:"token constant"},"B"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},"{"),p("console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n\n"),c("span",{class:"token function"},"setTimeout"),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"function"),p(),c("span",{class:"token function"},"timeout"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n  console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},"'TIMEOUT FIRED'"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"0"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n")])]),c("div",{class:"line-numbers-wrapper"},[c("span",{class:"line-number"},"1"),c("br"),c("span",{class:"line-number"},"2"),c("br"),c("span",{class:"line-number"},"3"),c("br"),c("span",{class:"line-number"},"4"),c("br"),c("span",{class:"line-number"},"5"),c("br"),c("span",{class:"line-number"},"6"),c("br"),c("span",{class:"line-number"},"7"),c("br"),c("span",{class:"line-number"},"8"),c("br")])],-1),q=c("p",null,[p("上面代码中，"),c("strong",null,"setImmediate与setTimeout(fn,0)各自添加了一个回调函数A和timeout，都是在下一次Event Loop触发"),p("。那么，哪个回调函数先执行呢？答案是不确定。运行结果可能是1--TIMEOUT FIRED--2，也可能是TIMEOUT FIRED--1--2。")],-1),T=c("blockquote",null,[c("p",null,"令人困惑的是，Node.js文档中称，setImmediate指定的回调函数，总是排在setTimeout前面。实际上，这种情况只发生在递归调用的时候。")],-1),h=c("div",{class:"language-js line-numbers-mode"},[c("pre",null,[c("code",null,[c("span",{class:"token function"},"setImmediate"),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"function"),p(),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},"{"),p("\n  "),c("span",{class:"token function"},"setImmediate"),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"function"),p(),c("span",{class:"token constant"},"A"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n    console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n    "),c("span",{class:"token function"},"setImmediate"),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"function"),p(),c("span",{class:"token constant"},"B"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},"{"),p("console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n  "),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n\n  "),c("span",{class:"token function"},"setTimeout"),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"function"),p(),c("span",{class:"token function"},"timeout"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n    console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},"'TIMEOUT FIRED'"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n  "),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"0"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n"),c("span",{class:"token comment"},"// 1"),p("\n"),c("span",{class:"token comment"},"// TIMEOUT FIRED"),p("\n"),c("span",{class:"token comment"},"// 2"),p("\n")])]),c("div",{class:"line-numbers-wrapper"},[c("span",{class:"line-number"},"1"),c("br"),c("span",{class:"line-number"},"2"),c("br"),c("span",{class:"line-number"},"3"),c("br"),c("span",{class:"line-number"},"4"),c("br"),c("span",{class:"line-number"},"5"),c("br"),c("span",{class:"line-number"},"6"),c("br"),c("span",{class:"line-number"},"7"),c("br"),c("span",{class:"line-number"},"8"),c("br"),c("span",{class:"line-number"},"9"),c("br"),c("span",{class:"line-number"},"10"),c("br"),c("span",{class:"line-number"},"11"),c("br"),c("span",{class:"line-number"},"12"),c("br"),c("span",{class:"line-number"},"13"),c("br")])],-1),I=c("p",null,"上面代码中，setImmediate和setTimeout被封装在一个setImmediate里面，它的运行结果总是1--TIMEOUT FIRED--2，这时函数A一定在timeout前面触发。至于2排在TIMEOUT FIRED的后面（即函数B在timeout后面触发），是因为setImmediate总是将事件注册到下一轮Event Loop，所以函数A和timeout是在同一轮Loop执行，而函数B在下一轮Loop执行。",-1),g=c("p",null,[p("我们由此得到了process.nextTick和setImmediate的一个重要区别："),c("strong",null,'多个process.nextTick语句总是在当前"执行栈"一次执行完，多个setImmediate可能则需要多次loop才能执行完'),p('。事实上，这正是Node.js 10.0版添加setImmediate方法的原因，否则像下面这样的递归调用process.nextTick，将会没完没了，主线程根本不会去读取"事件队列"！')],-1),E=c("div",{class:"language-js line-numbers-mode"},[c("pre",null,[c("code",null,[p("process"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"nextTick"),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"function"),p(),c("span",{class:"token function"},"foo"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n  process"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"nextTick"),c("span",{class:"token punctuation"},"("),p("foo"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n")])]),c("div",{class:"line-numbers-wrapper"},[c("span",{class:"line-number"},"1"),c("br"),c("span",{class:"line-number"},"2"),c("br"),c("span",{class:"line-number"},"3"),c("br")])],-1),_=c("blockquote",null,[c("p",null,"事实上，现在要是你写出递归的process.nextTick，Node.js会抛出一个警告，要求你改成setImmediate。")],-1),w=c("p",null,'另外，由于process.nextTick指定的回调函数是在本次"事件循环"触发，而setImmediate指定的是在下次"事件循环"触发，所以很显然，前者总是比后者发生得早，而且执行效率也高（因为不用检查"任务队列"）。',-1),j=c("p",null,[p("来源："),c("a",{href:"http://www.ruanyifeng.com/blog/2014/10/event-loop.html",target:"_blank",rel:"noopener noreferrer"},"http://www.ruanyifeng.com/blog/2014/10/event-loop.html")],-1);var x=n(i,[["render",function(n,e,c,p,l,i){const x=s("code-block");return u(),t("div",null,[r,a(x,{showAction:!1},{default:o((()=>[k])),_:1}),m,a(x,{showAction:!1},{default:o((()=>[b])),_:1}),d,f,a(x,{showAction:!1},{default:o((()=>[v])),_:1}),q,T,a(x,{showAction:!1},{default:o((()=>[h])),_:1}),I,g,a(x,{showAction:!1},{default:o((()=>[E])),_:1}),_,w,j])}]]);export{l as __pageData,x as default};
