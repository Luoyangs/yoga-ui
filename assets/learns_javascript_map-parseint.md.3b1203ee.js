import{_ as n,r as s,c as a,a as t,w as e,f as l,e as p,b as c,o}from"./app.de0c49ac.js";const u='{"title":"[\'1\', \'2\', \'3\'].map(parseInt) 解析","description":"","frontmatter":{},"headers":[{"level":3,"title":"parseInt","slug":"parseint"},{"level":3,"title":"map","slug":"map"},{"level":3,"title":"回到真实的事例上","slug":"回到真实的事例上"},{"level":3,"title":"如何在现实世界中做到这一点","slug":"如何在现实世界中做到这一点"}],"relativePath":"learns/javascript/map-parseint.md","lastUpdated":1635308878162}',i={},r=l('<p><div class="table-of-contents"><ul><li><a href="#parseint">parseInt</a></li><li><a href="#map">map</a></li><li><a href="#回到真实的事例上">回到真实的事例上</a></li><li><a href="#如何在现实世界中做到这一点">如何在现实世界中做到这一点</a></li></ul></div></p><h1 id="_1-2-3-map-parseint-解析" tabindex="-1">[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].map(parseInt) 解析 <a class="header-anchor" href="#_1-2-3-map-parseint-解析" aria-hidden="true">#</a></h1><h3 id="parseint" tabindex="-1">parseInt <a class="header-anchor" href="#parseint" aria-hidden="true">#</a></h3><p>parseInt() 函数解析一个字符串参数，并返回一个指定基数的整数 (数学系统的基础)。</p>',4),k=p("div",{class:"language-js line-numbers-mode"},[p("pre",null,[p("code",null,[p("span",{class:"token keyword"},"const"),c(" intValue "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"parseInt"),p("span",{class:"token punctuation"},"("),c("string"),p("span",{class:"token punctuation"},"["),p("span",{class:"token punctuation"},","),c(" radix"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n")])]),p("div",{class:"line-numbers-wrapper"},[p("span",{class:"line-number"},"1"),p("br")])],-1),m=p("p",null,"string 要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用 ToString 抽象操作)。字符串开头的空白符将会被忽略。",-1),b=p("p",null,[p("strong",null,"radix 一个介于2和36之间的整数"),c("(数学系统的基础)，表示上述字符串的基数。默认为10。"),p("strong",null,"如果该参数小于 2 或者大于 36，则 parseInt() 将返回 NaN。"),c(" 返回值 返回一个整数或NaN")],-1),d=p("div",{class:"language-js line-numbers-mode"},[p("pre",null,[p("code",null,[p("span",{class:"token function"},"parseInt"),p("span",{class:"token punctuation"},"("),p("span",{class:"token number"},"100"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c(),p("span",{class:"token comment"},"// 100"),c("\n"),p("span",{class:"token function"},"parseInt"),p("span",{class:"token punctuation"},"("),p("span",{class:"token number"},"100"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"10"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c(),p("span",{class:"token comment"},"// 100"),c("\n"),p("span",{class:"token function"},"parseInt"),p("span",{class:"token punctuation"},"("),p("span",{class:"token number"},"100"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"2"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c(),p("span",{class:"token comment"},"// 4 -> converts 100 in base 2 to base 10"),c("\n")])]),p("div",{class:"line-numbers-wrapper"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br"),p("span",{class:"line-number"},"3"),p("br")])],-1),g=l('<blockquote><p>注意： 在radix为 undefined，或者radix为 0 或者没有指定的情况下，JavaScript 作如下处理：</p></blockquote><ul><li>如果字符串 string 以&quot;0x&quot;或者&quot;0X&quot;开头, 则基数是16 (16进制).</li><li>如果字符串 string 以&quot;0&quot;开头, 基数是8（八进制）或者10（十进制），那么具体是哪个基数由实现环境决定。ECMAScript 5 规定使用10，但是并不是所有的浏览器都遵循这个规定。因此，永远都要明确给出radix参数的值。</li><li>如果字符串 string 以其它任何值开头，则基数是10 (十进制)。</li></ul><p>更多详见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt" target="_blank" rel="noopener noreferrer">parseInt | MDN</a></p><h3 id="map" tabindex="-1">map <a class="header-anchor" href="#map" aria-hidden="true">#</a></h3><p>map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p>',5),h=p("div",{class:"language-js line-numbers-mode"},[p("pre",null,[p("code",null,[p("span",{class:"token keyword"},"var"),c(" new_array "),p("span",{class:"token operator"},"="),c(" arr"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"map"),p("span",{class:"token punctuation"},"("),p("span",{class:"token keyword"},"function"),c(),p("span",{class:"token function"},"callback"),p("span",{class:"token punctuation"},"("),p("span",{class:"token parameter"},[c("currentValue"),p("span",{class:"token punctuation"},"["),p("span",{class:"token punctuation"},","),c("index"),p("span",{class:"token punctuation"},"["),p("span",{class:"token punctuation"},","),c(" array"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},"]")]),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n "),p("span",{class:"token comment"},"// Return element for new_array"),c("\n "),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},"["),p("span",{class:"token punctuation"},","),c(" thisArg"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},")"),c("\n")])]),p("div",{class:"line-numbers-wrapper"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br"),p("span",{class:"line-number"},"3"),p("br")])],-1),f=p("p",null,"可以看到callback回调函数需要三个参数, 我们通常只使用第一个参数 (其他两个参数是可选的)。",-1),_=p("ul",null,[p("li",null,"currentValue 是callback 数组中正在处理的当前元素。"),p("li",null,"index可选, 是callback 数组中正在处理的当前元素的索引。"),p("li",null,"array可选, 是callback map 方法被调用的数组。"),p("li",null,"另外还有thisArg可选, 执行 callback 函数时使用的this 值。")],-1),v=p("div",{class:"language-js line-numbers-mode"},[p("pre",null,[p("code",null,[p("span",{class:"token keyword"},"const"),c(" arr "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"2"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"3"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},";"),c("\narr"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"map"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},"("),p("span",{class:"token parameter"},"num"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token operator"},"=>"),c(" num "),p("span",{class:"token operator"},"+"),c(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c(),p("span",{class:"token comment"},"// [2, 3, 4]"),c("\n")])]),p("div",{class:"line-numbers-wrapper"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br")])],-1),w=p("h3",{id:"回到真实的事例上",tabindex:"-1"},[c("回到真实的事例上 "),p("a",{class:"header-anchor",href:"#回到真实的事例上","aria-hidden":"true"},"#")],-1),I=p("div",{class:"language-js line-numbers-mode"},[p("pre",null,[p("code",null,[p("span",{class:"token punctuation"},"["),p("span",{class:"token string"},"'1'"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token string"},"'2'"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token string"},"'3'"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"map"),p("span",{class:"token punctuation"},"("),c("parseInt"),p("span",{class:"token punctuation"},")"),c("\n")])]),p("div",{class:"line-numbers-wrapper"},[p("span",{class:"line-number"},"1"),p("br")])],-1),N=p("p",null,"对于每个迭代map, parseInt()传递两个参数: 字符串和基数。 所以实际执行的的代码是：",-1),A=p("div",{class:"language-js line-numbers-mode"},[p("pre",null,[p("code",null,[p("span",{class:"token punctuation"},"["),p("span",{class:"token string"},"'1'"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token string"},"'2'"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token string"},"'3'"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"map"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},"("),p("span",{class:"token parameter"},[c("item"),p("span",{class:"token punctuation"},","),c(" index")]),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token operator"},"=>"),c(),p("span",{class:"token punctuation"},"{"),c("\n\t"),p("span",{class:"token keyword"},"return"),c(),p("span",{class:"token function"},"parseInt"),p("span",{class:"token punctuation"},"("),c("item"),p("span",{class:"token punctuation"},","),c(" index"),p("span",{class:"token punctuation"},")"),c("\n"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},")"),c("\n\n"),p("span",{class:"token comment"},"//即返回的值分别为："),c("\n"),p("span",{class:"token function"},"parseInt"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},"'1'"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token comment"},"// 1"),c("\n"),p("span",{class:"token function"},"parseInt"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},"'2'"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token comment"},"// NaN"),c("\n"),p("span",{class:"token function"},"parseInt"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},"'3'"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token number"},"2"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token comment"},"// NaN, 3 不是二进制"),c("\n")])]),p("div",{class:"line-numbers-wrapper"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br"),p("span",{class:"line-number"},"3"),p("br"),p("span",{class:"line-number"},"4"),p("br"),p("span",{class:"line-number"},"5"),p("br"),p("span",{class:"line-number"},"6"),p("br"),p("span",{class:"line-number"},"7"),p("br"),p("span",{class:"line-number"},"8"),p("br")])],-1),x=p("p",null,"所以：",-1),T=p("div",{class:"language-js line-numbers-mode"},[p("pre",null,[p("code",null,[p("span",{class:"token punctuation"},"["),p("span",{class:"token string"},"'1'"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token string"},"'2'"),p("span",{class:"token punctuation"},","),c(),p("span",{class:"token string"},"'3'"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"map"),p("span",{class:"token punctuation"},"("),c("parseInt"),p("span",{class:"token punctuation"},")"),c("\n"),p("span",{class:"token comment"},"// 1, NaN, NaN"),c("\n")])]),p("div",{class:"line-numbers-wrapper"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br")])],-1),j=p("p",null,"由此，加里·伯恩哈德例子也就很好解释了，这里不再赘述",-1),S=p("div",{class:"language-js line-numbers-mode"},[p("pre",null,[p("code",null,[p("span",{class:"token punctuation"},"["),p("span",{class:"token string"},"'10'"),p("span",{class:"token punctuation"},","),p("span",{class:"token string"},"'10'"),p("span",{class:"token punctuation"},","),p("span",{class:"token string"},"'10'"),p("span",{class:"token punctuation"},","),p("span",{class:"token string"},"'10'"),p("span",{class:"token punctuation"},","),p("span",{class:"token string"},"'10'"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"map"),p("span",{class:"token punctuation"},"("),c("parseInt"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n"),p("span",{class:"token comment"},"// [10, NaN, 2, 3, 4]"),c("\n")])]),p("div",{class:"line-numbers-wrapper"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br")])],-1),y=p("h3",{id:"如何在现实世界中做到这一点",tabindex:"-1"},[c("如何在现实世界中做到这一点 "),p("a",{class:"header-anchor",href:"#如何在现实世界中做到这一点","aria-hidden":"true"},"#")],-1),q=p("p",null,"如果您实际上想要循环访问字符串数组, 该怎么办？ map()然后把它换成数字？使用编号!",-1),V=p("div",{class:"language-js line-numbers-mode"},[p("pre",null,[p("code",null,[p("span",{class:"token punctuation"},"["),p("span",{class:"token string"},"'10'"),p("span",{class:"token punctuation"},","),p("span",{class:"token string"},"'10'"),p("span",{class:"token punctuation"},","),p("span",{class:"token string"},"'10'"),p("span",{class:"token punctuation"},","),p("span",{class:"token string"},"'10'"),p("span",{class:"token punctuation"},","),p("span",{class:"token string"},"'10'"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"map"),p("span",{class:"token punctuation"},"("),c("Number"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),c("\n"),p("span",{class:"token comment"},"// [10, 10, 10, 10, 10]"),c("\n")])]),p("div",{class:"line-numbers-wrapper"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br")])],-1);var C=n(i,[["render",function(n,l,p,c,u,i){const C=s("code-block");return o(),a("div",null,[r,t(C,{showAction:!1},{default:e((()=>[k])),_:1}),m,b,t(C,{showAction:!1},{default:e((()=>[d])),_:1}),g,t(C,{showAction:!1},{default:e((()=>[h])),_:1}),f,_,t(C,{showAction:!1},{default:e((()=>[v])),_:1}),w,t(C,{showAction:!1},{default:e((()=>[I])),_:1}),N,t(C,{showAction:!1},{default:e((()=>[A])),_:1}),x,t(C,{showAction:!1},{default:e((()=>[T])),_:1}),j,t(C,{showAction:!1},{default:e((()=>[S])),_:1}),y,q,t(C,{showAction:!1},{default:e((()=>[V])),_:1})])}]]);export{u as __pageData,C as default};
