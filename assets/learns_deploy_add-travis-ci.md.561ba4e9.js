import{_ as e,r as a,c as s,a as i,w as n,f as l,o as r,e as t,b as o}from"./app.de0c49ac.js";const p='{"title":"为Github Page集成Travis CI","description":"","frontmatter":{},"headers":[{"level":2,"title":"写在前面","slug":"写在前面"},{"level":2,"title":"使用Travis CI的过程：","slug":"使用travis-ci的过程："},{"level":2,"title":"配置GITHUB_TOKEN","slug":"配置github-token"},{"level":2,"title":"启用Github Pages","slug":"启用github-pages"}],"relativePath":"learns/deploy/add-travis-ci.md","lastUpdated":1635307774047}',b={},u=l('<p><div class="table-of-contents"><ul><li><a href="#写在前面">写在前面</a></li><li><a href="#使用travis-ci的过程：">使用Travis CI的过程：</a></li><li><a href="#配置github-token">配置GITHUB_TOKEN</a></li><li><a href="#启用github-pages">启用Github Pages</a></li></ul></div></p><h1 id="为github-page集成travis-ci" tabindex="-1">为Github Page集成Travis CI <a class="header-anchor" href="#为github-page集成travis-ci" aria-hidden="true">#</a></h1><h2 id="写在前面" tabindex="-1">写在前面 <a class="header-anchor" href="#写在前面" aria-hidden="true">#</a></h2><p>为了给编写的vue libs增加一个可预览的demo站点，采用了<a href="https://pages.github.com/" target="_blank" rel="noopener noreferrer">Github Pages</a>, 可以将编译好的静态html上传到github免费部署。</p><p>但是每次手动部署都需要在本地先编译vue libs的源码，然后生成demo的内容，最后编译demo才生成静态的html。这中间的过程完全是可复制的，因此可以借助集成工具进行自动化部署。</p><p><a href="https://app.travis-ci.com/" target="_blank" rel="noopener noreferrer">Travis CI</a>功能强大，操作简单，可以实现类似<a href="https://docs.gitlab.com/ee/ci/" target="_blank" rel="noopener noreferrer">GitLab CI/CD</a>的功能。</p><h2 id="使用travis-ci的过程：" tabindex="-1">使用Travis CI的过程： <a class="header-anchor" href="#使用travis-ci的过程：" aria-hidden="true">#</a></h2><ul><li>注册<a href="https://app.travis-ci.com/" target="_blank" rel="noopener noreferrer">Travis</a>账号, 可以使用github账号登录</li><li>进入设置页面，&quot;GitHub Apps Integration&quot;点击”Activate“进行github repositories授权，这里会跳转到github</li><li>输入github密码，会跳转到”settings/installations“</li><li>这里可以看到Travis CI的配置，”Repository access“里面可以配置你想授权的github project</li><li>然后点击”Approve and install“</li><li>稍等一会就可以完成绑定</li></ul><p>上面是绑定Travis CI和Github的过程，但是要在项目里面使用Travis CI，还需要给项目添加配置文件.travis.yml</p>',9),c=t("div",{class:"language-bash line-numbers-mode"},[t("pre",null,[t("code",null,[o("bunlanguage: node_js\nnode_js:\n  - lts/*\ninstall:\n  - "),t("span",{class:"token function"},"yarn"),o(),t("span",{class:"token function"},"install"),o("\nbefore_script:\n  - "),t("span",{class:"token function"},"rm"),o(" -rf docs/.vitepress/dist\n  - node bin/deploy.js\nscript:\n  - "),t("span",{class:"token function"},"yarn"),o(" build\n  - "),t("span",{class:"token assign-left variable"},"ENV"),t("span",{class:"token operator"},"="),o("prod "),t("span",{class:"token function"},"yarn"),o(" vitepress build docs\n  - node bin/append-meta.js\ndeploy:\n  provider: pages\n  skip_cleanup: "),t("span",{class:"token boolean"},"true"),o("\n  local_dir: docs/.vitepress/dist\n  github_token: "),t("span",{class:"token variable"},"$GITHUB_TOKEN"),o("\n  keep_history: "),t("span",{class:"token boolean"},"false"),o("\n  on:\n    branch: master\n")])]),t("div",{class:"line-numbers-wrapper"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br"),t("span",{class:"line-number"},"8"),t("br"),t("span",{class:"line-number"},"9"),t("br"),t("span",{class:"line-number"},"10"),t("br"),t("span",{class:"line-number"},"11"),t("br"),t("span",{class:"line-number"},"12"),t("br"),t("span",{class:"line-number"},"13"),t("br"),t("span",{class:"line-number"},"14"),t("br"),t("span",{class:"line-number"},"15"),t("br"),t("span",{class:"line-number"},"16"),t("br"),t("span",{class:"line-number"},"17"),t("br"),t("span",{class:"line-number"},"18"),t("br"),t("span",{class:"line-number"},"19"),t("br"),t("span",{class:"line-number"},"20"),t("br")])],-1),h=l('<h2 id="配置github-token" tabindex="-1">配置GITHUB_TOKEN <a class="header-anchor" href="#配置github-token" aria-hidden="true">#</a></h2><p>脚本内容一目了然，唯一需要备注的是变量$GITHUB_TOKEN的配置。</p><ul><li>进入Github Repository</li><li>点击右上角头像，进入setting</li><li>进入&quot;Developer settings&quot;</li><li>选择”Personal access tokens“</li><li>点击”Generate new token“，填写一些备注信息，然后点击”Generate token“</li><li>复制生成的token, 进入”Travis CI“</li><li>选择需要配置的项目，点击”More options“进入”settings“</li><li>选择&quot;Environment Variables&quot;，添加一条配置，name是GITHUB_TOKEN，value就是你复制的token, 点击”add“保存</li><li>回到项目，重新提交代码到”master“分支，就会看到Travis CI开始工作了。</li><li>Travis CI成功后，你会看到github project下面多了一个”gh-pages“的分支，里面就是Travis CI 编译的静态html.</li></ul><h2 id="启用github-pages" tabindex="-1">启用Github Pages <a class="header-anchor" href="#启用github-pages" aria-hidden="true">#</a></h2><p>github page可以是html也可以是.md格式的内容。这里我们主要配置html格式的站点。</p><ul><li>进入github project的”setting“</li><li>选择”pages“, 可以看到GitHub Pages</li><li>在”Source“里面可以配置GitHub Pages的源码仓库</li><li>这里我们直接选择刚刚Travis CI自动部署生成的gh-pages的根目录</li><li>可以选择主题，我们这里是自己设置网站样式，就不用它的主题了</li><li>然后点击save就可以完成, 会看到github给你生成的url</li><li>github pages会自动部署</li></ul>',6);var d=e(b,[["render",function(e,l,t,o,p,b){const d=a("code-block");return r(),s("div",null,[u,i(d,{showAction:!1},{default:n((()=>[c])),_:1}),h])}]]);export{p as __pageData,d as default};
